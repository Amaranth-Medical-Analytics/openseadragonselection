{"version":3,"sources":["selection.js","selectionoverlay.js","selectionrect.js"],"names":["$","onOutsideDrag","e","this","viewer","setMouseNavEnabled","delta","viewport","deltaPointsFromPixels","end","pointFromPixel","position","start","Point","x","y","rect","oldRect","restrictToImage","clone","rectDone","allowRotation","angle1","getAngleFromCenter","angle2","rotation","Math","PI","startRotated","getPrerotatedRect","rotatedStartPoint","startRotatedHeight","width","height","bounds","world","getHomeBounds","fitsIn","Rect","pointIsInImage","restrictVector","SelectionRect","draw","onOutsideDragEnd","abs","onClick","canvas","focus","onInsideDrag","addClass","element","onInsideDragEnd","removeClass","onBorderDrag","border","center","getDegreeRotation","rotate","getCenter","newCenter","target","minus","onBorderDragEnd","onKeyPress","key","keyCode","charCode","confirm","String","fromCharCode","keyboardShortcut","toggleState","dist","distanceTo","angle","atan2","heightModDelta","self","point","prop","version","major","Error","Viewer","prototype","selection","options","selectionInstance","Selection","extend","isSelecting","buttonActiveImg","toggleButton","showSelectionControl","showConfirmDenyButtons","styleConfirmDenyButtons","returnPixelCoordinates","onSelection","prefixUrl","navImages","REST","GROUP","HOVER","DOWN","selectionConfirm","selectionCancel","handleStyle","top","left","margin","background","cornersStyle","makeNeutralElement","style","className","borders","handle","corners","i","MouseTracker","dragHandler","bind","dragEndHandler","appendChild","setTimeout","right","bottom","overlay","SelectionOverlay","innerTracker","clickTimeThreshold","clickDistThreshold","delegate","clickHandler","outerTracker","startDisabled","addEvent","container","prefix","useGroup","buttons","anyButton","onFocusHandler","onFocus","onBlurHandler","onBlur","Button","getElement","tooltip","getString","srcRest","srcGroup","srcHover","srcDown","onRelease","push","imgDown","cloneNode","confirmButton","classList","add","cancelButton","cancel","transform","addHandler","ControlDock","setState","enabled","setTracking","undraw","visibility","raiseEvent","setAllowRotation","enable","disable","update","normalize","drawHTML","drawer","destroy","result","real","viewportToImageRectangle","fromRect","round","OpenSeadragon","location","Overlay","apply","arguments","isPlainObject","Object","create","replace","equals","other","toString","swapWidthHeight","swapped","diff","fixed","area","getTopLeft","getTopRight","getBottomRight","getBottomLeft","areaEnd","reduceRotation","reduced"],"mappings":"CAAA,SAAAA,GACA,YAmVA,SAAAC,GAAAC,GAEAC,KAAAC,OAAAC,oBAAA,EACA,IAAAC,GAAAH,KAAAC,OAAAG,SAAAC,sBAAAN,EAAAI,OAAA,GACAG,EAAAN,KAAAC,OAAAG,SAAAG,eAAAR,EAAAS,UAAA,GACAC,EAAA,GAAAZ,GAAAa,MAAAJ,EAAAK,EAAAR,EAAAQ,EAAAL,EAAAM,EAAAT,EAAAS,EACA,IAAAZ,KAAAa,KAcA,CACA,GAAAC,EAIA,IAHAd,KAAAe,kBACAD,EAAAd,KAAAa,KAAAG,SAEAhB,KAAAiB,UAEA,GAAAjB,KAAAkB,cAAA,CACA,GAAAC,GAAAnB,KAAAa,KAAAO,mBAAAX,GACAY,EAAArB,KAAAa,KAAAO,mBAAAd,EACAN,MAAAa,KAAAS,UAAAtB,KAAAa,KAAAS,SAAAH,EAAAE,GAAAE,KAAAC,QAGAxB,MAAAyB,aACAzB,KAAAa,KAAAa,EAAA1B,KAAA2B,kBAAArB,EAAAN,KAAA4B,qBAEA5B,KAAAa,KAAAgB,OAAA1B,EAAAQ,EACAX,KAAAa,KAAAiB,QAAA3B,EAAAS,EAGA,IAAAmB,GAAA/B,KAAAC,OAAA+B,MAAAC,eACAjC,MAAAe,kBAAAf,KAAAa,KAAAqB,OAAA,GAAArC,GAAAsC,KAAA,EAAA,EAAAJ,EAAAF,MAAAE,EAAAD,WACA9B,KAAAa,KAAAC,OApCA,CACA,GAAAd,KAAAe,gBAAA,CACA,IAAAqB,EAAApC,KAAAS,GACA,MAEA4B,GAAAlC,EAAAG,GAEAN,KAAAyB,cACAzB,KAAA2B,kBAAAlB,EACAT,KAAAa,KAAAa,EAAAjB,EAAAH,EAAAN,KAAA4B,qBAEA5B,KAAAa,KAAA,GAAAhB,GAAAyC,cAAA7B,EAAAE,EAAAF,EAAAG,EAAAT,EAAAQ,EAAAR,EAAAS,GAEAZ,KAAAiB,UAAA,EA0BAjB,KAAAuC,OAGA,QAAAC,KAGAxC,KAAAa,KAAAgB,MAAA,IACA7B,KAAAa,KAAAF,GAAAX,KAAAa,KAAAgB,MACA7B,KAAAa,KAAAgB,MAAAN,KAAAkB,IAAAzC,KAAAa,KAAAgB,QAEA7B,KAAAa,KAAAiB,OAAA,IACA9B,KAAAa,KAAAD,GAAAZ,KAAAa,KAAAiB,OACA9B,KAAAa,KAAAiB,OAAAP,KAAAkB,IAAAzC,KAAAa,KAAAiB,SAIA9B,KAAAC,OAAAC,oBAAA,GACAF,KAAAiB,UAAA,EAGA,QAAAyB,KACA1C,KAAAC,OAAA0C,OAAAC,QAGA,QAAAC,GAAA9C,GACAF,EAAAiD,SAAA9C,KAAA+C,QAAA,WACA,IAAA5C,GAAAH,KAAAC,OAAAG,SAAAC,sBAAAN,EAAAI,OAAA,EACAH,MAAAa,KAAAF,GAAAR,EAAAQ,EACAX,KAAAa,KAAAD,GAAAT,EAAAS,CACA,IAAAmB,GAAA/B,KAAAC,OAAA+B,MAAAC,eACAjC,MAAAe,kBAAAf,KAAAa,KAAAqB,OAAA,GAAArC,GAAAsC,KAAA,EAAA,EAAAJ,EAAAF,MAAAE,EAAAD,WACA9B,KAAAa,KAAAF,GAAAR,EAAAQ,EACAX,KAAAa,KAAAD,GAAAT,EAAAS,GAEAZ,KAAAuC,OAGA,QAAAS,KACAnD,EAAAoD,YAAAjD,KAAA+C,QAAA,YAGA,QAAAG,GAAAC,EAAApD,GACA,GAEAqD,GAFAjD,EAAAJ,EAAAI,MACAmB,EAAAtB,KAAAa,KAAAwC,oBAEAvC,EAAAd,KAAAe,gBAAAf,KAAAa,KAAAG,QAAA,IAOA,QANA,IAAAM,IAEAnB,EAAAA,EAAAmD,UAAAhC,EAAA,GAAAzB,GAAAa,MAAA,EAAA,IACA0C,EAAApD,KAAAa,KAAA0C,aAEApD,EAAAH,KAAAC,OAAAG,SAAAC,sBAAAF,GAAA,GACAgD,GACA,IAAA,GACAnD,KAAAa,KAAAD,GAAAT,EAAAS,EACAZ,KAAAa,KAAAiB,QAAA3B,EAAAS,CACA,MACA,KAAA,GACAZ,KAAAa,KAAAgB,OAAA1B,EAAAQ,CACA,MACA,KAAA,GACAX,KAAAa,KAAAiB,QAAA3B,EAAAS,CACA,MACA,KAAA,GACAZ,KAAAa,KAAAF,GAAAR,EAAAQ,EACAX,KAAAa,KAAAgB,OAAA1B,EAAAQ,CACA,MACA,KAAA,GACAX,KAAAa,KAAAD,GAAAT,EAAAS,EACAZ,KAAAa,KAAAiB,QAAA3B,EAAAS,EACAZ,KAAAa,KAAAF,GAAAR,EAAAQ,EACAX,KAAAa,KAAAgB,OAAA1B,EAAAQ,CACA,MACA,KAAA,KACAX,KAAAa,KAAAD,GAAAT,EAAAS,EACAZ,KAAAa,KAAAiB,QAAA3B,EAAAS,EACAZ,KAAAa,KAAAgB,OAAA1B,EAAAQ,CACA,MACA,KAAA,KACAX,KAAAa,KAAAgB,OAAA1B,EAAAQ,EACAX,KAAAa,KAAAiB,QAAA3B,EAAAS,CACA,MACA,KAAA,KACAZ,KAAAa,KAAAiB,QAAA3B,EAAAS,EACAZ,KAAAa,KAAAF,GAAAR,EAAAQ,EACAX,KAAAa,KAAAgB,OAAA1B,EAAAQ,EAGA,GAAA,IAAAW,EAAA,CAEA,GAAAkC,GAAAxD,KAAAa,KAAA0C,YAEAE,EAAAD,EAAAF,OAAAhC,EAAA8B,EAEAjD,GAAAsD,EAAAC,MAAAF,GACAxD,KAAAa,KAAAF,GAAAR,EAAAQ,EACAX,KAAAa,KAAAD,GAAAT,EAAAS,EAEA,GAAAmB,GAAA/B,KAAAC,OAAA+B,MAAAC,eACAjC,MAAAe,kBAAAf,KAAAa,KAAAqB,OAAA,GAAArC,GAAAsC,KAAA,EAAA,EAAAJ,EAAAF,MAAAE,EAAAD,WACA9B,KAAAa,KAAAC,GAEAd,KAAAuC,OAKA,QAAAoB,KACA3D,KAAAa,KAAAgB,MAAA,IACA7B,KAAAa,KAAAF,GAAAX,KAAAa,KAAAgB,MACA7B,KAAAa,KAAAgB,MAAAN,KAAAkB,IAAAzC,KAAAa,KAAAgB,QAEA7B,KAAAa,KAAAiB,OAAA,IACA9B,KAAAa,KAAAD,GAAAZ,KAAAa,KAAAiB,OACA9B,KAAAa,KAAAiB,OAAAP,KAAAkB,IAAAzC,KAAAa,KAAAiB,SAIA,QAAA8B,GAAA7D,GACA,GAAA8D,GAAA9D,EAAA+D,QAAA/D,EAAA+D,QAAA/D,EAAAgE,QACA,MAAAF,EACA7D,KAAAgE,UACAC,OAAAC,aAAAL,KAAA7D,KAAAmE,kBACAnE,KAAAoE,cAIA,QAAA1C,GAAAjB,EAAAH,EAAAwB,GACA,GAAArB,EAAAE,EAAAL,EAAAK,EAAA,CAEA,GAAAA,GAAAF,CACAA,GAAAH,EACAA,EAAAK,EAEA,GAAAR,GAAAG,EAAAoD,MAAAjD,GACA4D,EAAA5D,EAAA6D,WAAAhE,GACAiE,KAAAhD,KAAAiD,MAAArE,EAAAQ,EAAAR,EAAAS,GAAAW,KAAAC,GAAA,EACA4B,EAAA,GAAAvD,GAAAa,MACAP,EAAAQ,EAAA,EAAAF,EAAAE,EACAR,EAAAS,EAAA,EAAAH,EAAAG,GAEAC,EAAA,GAAAhB,GAAAyC,cACAc,EAAAzC,EAAA0D,EAAA,EACAjB,EAAAxC,EAAAkB,EAAA,EACAuC,EACAvC,EACAyC,GAEAE,EAAA,GAAA5E,GAAAa,MAAA,EAAAoB,EAIA,OAHA2C,GAAAA,EAAAnB,OAAAzC,EAAAwC,oBAAA,GAAAxD,GAAAa,MAAA,EAAA,IACAG,EAAAF,GAAA8D,EAAA9D,EAAA,EACAE,EAAAD,GAAA6D,EAAA7D,EAAA,EACAC,EAGA,QAAAuB,GAAAsC,EAAAC,GACA,GAAA5C,GAAA2C,EAAAzE,OAAA+B,MAAAC,eACA,OAAA0C,GAAAhE,GAAA,GAAAgE,EAAAhE,GAAAoB,EAAAF,OAAA8C,EAAA/D,GAAA,GAAA+D,EAAA/D,GAAAmB,EAAAD,OAGA,QAAAO,GAAAlC,EAAAG,GACA,GAAAG,EACA,KAAA,GAAAmE,MAAAjE,EAAA,EAAAC,EAAA,GACAH,EAAAH,EAAAsE,GAAAzE,EAAAyE,GACAnE,EAAA,GAAAA,EAAA,IACAH,EAAAsE,GAAA,GACAzE,EAAAyE,IAAAtE,EAAAsE,GAAA,EACAtE,EAAAsE,GAAA,GACAtE,EAAAsE,GAAA,IACAzE,EAAAyE,IAAAtE,EAAAsE,GACAtE,EAAAsE,GAAA,IAxiBA,IAAA/E,EAAAgF,SAAAhF,EAAAgF,QAAAC,MAAA,EACA,KAAA,IAAAC,OAAA,+EAGAlF,GAAAmF,OAAAC,UAAAC,UAAA,SAAAC,GAMA,MALAnF,MAAAoF,oBAAAD,IACAA,EAAAA,MACAA,EAAAlF,OAAAD,KACAA,KAAAoF,kBAAA,GAAAvF,GAAAwF,UAAAF,IAEAnF,KAAAoF,mBAUAvF,EAAAwF,UAAA,SAAAF,GAEAtF,EAAAyF,QAAA,EAAAtF,MAEAC,OAAA,KACAsF,aAAA,EACAC,iBAAA,EACAvE,UAAA,EAGA8B,QAAA,KACA0C,aAAA,KACAC,sBAAA,EACAC,wBAAA,EACAC,yBAAA,EACAC,wBAAA,EACA1B,iBAAA,IACAtD,KAAA,KACAK,eAAA,EACAO,cAAA,EACAG,mBAAA,GACAb,iBAAA,EACA+E,YAAA,KACAC,UAAA,KACAC,WACAd,WACAe,KAAA,qBACAC,MAAA,2BACAC,MAAA,sBACAC,KAAA,yBAEAC,kBACAJ,KAAA,6BACAC,MAAA,mCACAC,MAAA,8BACAC,KAAA,iCAEAE,iBACAL,KAAA,4BACAC,MAAA,kCACAC,MAAA,6BACAC,KAAA,iCAGAG,aACAC,IAAA,MACAC,KAAA,MACA5E,MAAA,MACAC,OAAA,MACA4E,OAAA,gBACAC,WAAA,OACAxD,OAAA,kBAEAyD,cACA/E,MAAA,MACAC,OAAA,MACA6E,WAAA,OACAxD,OAAA,mBAGAgC,GAEAtF,EAAAyF,QAAA,EAAAtF,KAAAgG,UAAAhG,KAAAC,OAAA+F,WAEAhG,KAAA+C,UACA/C,KAAA+C,QAAAlD,EAAAgH,mBAAA,OACA7G,KAAA+C,QAAA+D,MAAAH,WAAA,qBACA3G,KAAA+C,QAAAgE,UAAA,iBAEA/G,KAAAgH,QAAAhH,KAAAgH,WAGA,KAAA,GAFAC,GACAC,KACAC,EAAA,EAAAA,EAAA,EAAAA,IACAnH,KAAAgH,QAAAG,KACAnH,KAAAgH,QAAAG,GAAAtH,EAAAgH,mBAAA,OACA7G,KAAAgH,QAAAG,GAAAJ,UAAA,UAAAI,EACAnH,KAAAgH,QAAAG,GAAAL,MAAAtG,SAAA,WACAR,KAAAgH,QAAAG,GAAAL,MAAAjF,MAAA,MACA7B,KAAAgH,QAAAG,GAAAL,MAAAhF,OAAA,MACA9B,KAAAgH,QAAAG,GAAAL,MAAAH,WAAA,QAGAM,EAAApH,EAAAgH,mBAAA,OACAI,EAAAF,UAAA,UAAAI,EAAA,UACAF,EAAAH,MAAAtG,SAAA,WACAyG,EAAAH,MAAAN,IAAAxG,KAAAuG,YAAAC,IACAS,EAAAH,MAAAL,KAAAzG,KAAAuG,YAAAE,KACAQ,EAAAH,MAAAjF,MAAA7B,KAAAuG,YAAA1E,MACAoF,EAAAH,MAAAhF,OAAA9B,KAAAuG,YAAAzE,OACAmF,EAAAH,MAAAJ,OAAA1G,KAAAuG,YAAAG,OACAO,EAAAH,MAAAH,WAAA3G,KAAAuG,YAAAI,WACAM,EAAAH,MAAA3D,OAAAnD,KAAAuG,YAAApD,OACA,GAAAtD,GAAAuH,cACArE,QAAA/C,KAAAgH,QAAAG,GACAE,YAAAnE,EAAAoE,KAAAtH,KAAAmH,GACAI,eAAA5D,EAAA2D,KAAAtH,KAAAmH,KAGAD,EAAAC,GAAAtH,EAAAgH,mBAAA,OACAK,EAAAC,GAAAJ,UAAA,UAAAI,EAAA,UACAD,EAAAC,GAAAL,MAAAtG,SAAA,WACA0G,EAAAC,GAAAL,MAAAjF,MAAA7B,KAAA4G,aAAA/E,MACAqF,EAAAC,GAAAL,MAAAhF,OAAA9B,KAAA4G,aAAA9E,OACAoF,EAAAC,GAAAL,MAAAH,WAAA3G,KAAA4G,aAAAD,WACAO,EAAAC,GAAAL,MAAA3D,OAAAnD,KAAA4G,aAAAzD,OACA,GAAAtD,GAAAuH,cACArE,QAAAmE,EAAAC,GACAE,YAAAnE,EAAAoE,KAAAtH,KAAAmH,EAAA,IACAI,eAAA5D,EAAA2D,KAAAtH,KAAAmH,KAGAnH,KAAAgH,QAAAG,GAAAK,YAAAP,GACAjH,KAAA+C,QAAAyE,YAAAxH,KAAAgH,QAAAG,IAEAM,WAAAzH,KAAA+C,QAAAyE,YAAAF,KAAAtH,KAAA+C,QAAAmE,EAAAC,IAAA,EAEAnH,MAAAgH,QAAA,GAAAF,MAAAN,IAAA,EACAxG,KAAAgH,QAAA,GAAAF,MAAAjF,MAAA,OACA7B,KAAAgH,QAAA,GAAAF,MAAAY,MAAA,EACA1H,KAAAgH,QAAA,GAAAF,MAAAhF,OAAA,OACA9B,KAAAgH,QAAA,GAAAF,MAAAa,OAAA,EACA3H,KAAAgH,QAAA,GAAAF,MAAAjF,MAAA,OACA7B,KAAAgH,QAAA,GAAAF,MAAAL,KAAA,EACAzG,KAAAgH,QAAA,GAAAF,MAAAhF,OAAA,OACAoF,EAAA,GAAAJ,MAAAN,IAAA,OACAU,EAAA,GAAAJ,MAAAL,KAAA,OACAS,EAAA,GAAAJ,MAAAN,IAAA,OACAU,EAAA,GAAAJ,MAAAY,MAAA,OACAR,EAAA,GAAAJ,MAAAa,OAAA,OACAT,EAAA,GAAAJ,MAAAY,MAAA,OACAR,EAAA,GAAAJ,MAAAa,OAAA,OACAT,EAAA,GAAAJ,MAAAL,KAAA,OAEAzG,KAAA4H,UACA5H,KAAA4H,QAAA,GAAA/H,GAAAgI,iBAAA7H,KAAA+C,QAAA/C,KAAAa,MAAA,GAAAhB,GAAAyC,gBAGAtC,KAAA8H,aAAA,GAAAjI,GAAAuH,cACArE,QAAA/C,KAAA+C,QACAgF,mBAAA/H,KAAAC,OAAA8H,mBACAC,mBAAAhI,KAAAC,OAAA+H,mBACAX,YAAAxH,EAAAoI,SAAAjI,KAAA6C,GACA0E,eAAA1H,EAAAoI,SAAAjI,KAAAgD,GAEAkF,aAAArI,EAAAoI,SAAAjI,KAAA0C,KAKA1C,KAAAmI,aAAA,GAAAtI,GAAAuH,cACArE,QAAA/C,KAAAC,OAAA0C,OACAoF,mBAAA/H,KAAAC,OAAA8H,mBACAC,mBAAAhI,KAAAC,OAAA+H,mBACAX,YAAAxH,EAAAoI,SAAAjI,KAAAF,GACAyH,eAAA1H,EAAAoI,SAAAjI,KAAAwC,GACA0F,aAAArI,EAAAoI,SAAAjI,KAAA0C,GACA0F,eAAApI,KAAAuF,cAGAvF,KAAAmE,kBACAtE,EAAAwI,SACArI,KAAAC,OAAAqI,UACA,WACAzI,EAAAoI,SAAAjI,KAAA4D,IACA,EAIA,IAAA2E,GAAAvI,KAAA+F,WAAA/F,KAAAC,OAAA8F,WAAA,GACAyC,EAAAxI,KAAAC,OAAAwI,SAAAzI,KAAAC,OAAAwI,QAAAA,QACAC,EAAAF,EAAAxI,KAAAC,OAAAwI,QAAAA,QAAA,GAAA,KACAE,EAAAD,EAAAA,EAAAE,QAAA,KACAC,EAAAH,EAAAA,EAAAI,OAAA,IAwBA,IAvBA9I,KAAA0F,uBACA1F,KAAAyF,aAAA,GAAA5F,GAAAkJ,QACAhG,QAAA/C,KAAAyF,aAAA5F,EAAAmJ,WAAAhJ,KAAAyF,cAAA,KACAsC,mBAAA/H,KAAAC,OAAA8H,mBACAC,mBAAAhI,KAAAC,OAAA+H,mBACAiB,QAAApJ,EAAAqJ,UAAA,6BAAA,mBACAC,QAAAZ,EAAAvI,KAAAgG,UAAAd,UAAAe,KACAmD,SAAAb,EAAAvI,KAAAgG,UAAAd,UAAAgB,MACAmD,SAAAd,EAAAvI,KAAAgG,UAAAd,UAAAiB,MACAmD,QAAAf,EAAAvI,KAAAgG,UAAAd,UAAAkB,KACAmD,UAAAvJ,KAAAoE,YAAAkD,KAAAtH,MACA4I,QAAAD,EACAG,OAAAD,IAEAL,IACAxI,KAAAC,OAAAwI,QAAAA,QAAAe,KAAAxJ,KAAAyF,cACAzF,KAAAC,OAAAwI,QAAA1F,QAAAyE,YAAAxH,KAAAyF,aAAA1C,UAEA/C,KAAAyF,aAAAgE,UACAzJ,KAAAwF,gBAAAxF,KAAAyF,aAAAgE,QAAAC,WAAA,GACA1J,KAAAyF,aAAA1C,QAAAyE,YAAAxH,KAAAwF,mBAGAxF,KAAA2F,uBAAA,CACA3F,KAAA2J,cAAA,GAAA9J,GAAAkJ,QACAhG,QAAA/C,KAAA2J,cAAA9J,EAAAmJ,WAAAhJ,KAAA2J,eAAA,KACA5B,mBAAA/H,KAAAC,OAAA8H,mBACAC,mBAAAhI,KAAAC,OAAA+H,mBACAiB,QAAApJ,EAAAqJ,UAAA,8BAAA,oBACAC,QAAAZ,EAAAvI,KAAAgG,UAAAK,iBAAAJ,KACAmD,SAAAb,EAAAvI,KAAAgG,UAAAK,iBAAAH,MACAmD,SAAAd,EAAAvI,KAAAgG,UAAAK,iBAAAF,MACAmD,QAAAf,EAAAvI,KAAAgG,UAAAK,iBAAAD,KACAmD,UAAAvJ,KAAAgE,QAAAsD,KAAAtH,MACA4I,QAAAD,EACAG,OAAAD,GAEA,IAAA7E,GAAAhE,KAAA2J,cAAA5G,OACAiB,GAAA4F,UAAAC,IAAA,kBACA7J,KAAA+C,QAAAyE,YAAAxD,GAEAhE,KAAA8J,aAAA,GAAAjK,GAAAkJ,QACAhG,QAAA/C,KAAA8J,aAAAjK,EAAAmJ,WAAAhJ,KAAA8J,cAAA,KACA/B,mBAAA/H,KAAAC,OAAA8H,mBACAC,mBAAAhI,KAAAC,OAAA+H,mBACAiB,QAAApJ,EAAAqJ,UAAA,8BAAA,mBACAC,QAAAZ,EAAAvI,KAAAgG,UAAAM,gBAAAL,KACAmD,SAAAb,EAAAvI,KAAAgG,UAAAM,gBAAAJ,MACAmD,SAAAd,EAAAvI,KAAAgG,UAAAM,gBAAAH,MACAmD,QAAAf,EAAAvI,KAAAgG,UAAAM,gBAAAF,KACAmD,UAAAvJ,KAAA+J,OAAAzC,KAAAtH,MACA4I,QAAAD,EACAG,OAAAD,GAEA,IAAAkB,GAAA/J,KAAA8J,aAAA/G,OACAgH,GAAAH,UAAAC,IAAA,iBACA7J,KAAA+C,QAAAyE,YAAAuC,GAEA/J,KAAA4F,0BACA5B,EAAA8C,MAAAtG,SAAA,WACAwD,EAAA8C,MAAAN,IAAA,MACAxC,EAAA8C,MAAAL,KAAA,MACAzC,EAAA8C,MAAAkD,UAAA,yBAEAD,EAAAjD,MAAAtG,SAAA,WACAuJ,EAAAjD,MAAAN,IAAA,MACAuD,EAAAjD,MAAAL,KAAA,MACAsD,EAAAjD,MAAAkD,UAAA,sBAIAhK,KAAAC,OAAAgK,WAAA,YAAAjK,KAAA8F,aAEA9F,KAAAC,OAAAgK,WAAA,OAAAjK,KAAAuC,KAAA+E,KAAAtH,OACAA,KAAAC,OAAAgK,WAAA,YAAAjK,KAAAuC,KAAA+E,KAAAtH,OACAA,KAAAC,OAAAgK,WAAA,SAAAjK,KAAAuC,KAAA+E,KAAAtH,OACAA,KAAAC,OAAAgK,WAAA,SAAAjK,KAAAuC,KAAA+E,KAAAtH,QAGAH,EAAAyF,OAAAzF,EAAAwF,UAAAJ,UAAApF,EAAAqK,YAAAjF,WAEAb,YAAA,WACA,MAAApE,MAAAmK,UAAAnK,KAAAuF,cAGA4E,SAAA,SAAAC,GASA,MARApK,MAAAuF,YAAA6E,EAEApK,KAAAmI,aAAAkC,YAAAD,GACAA,EAAApK,KAAAuC,OAAAvC,KAAAsK,SACAtK,KAAAwF,kBACAxF,KAAAwF,gBAAAsB,MAAAyD,WAAAH,EAAA,UAAA,UAEApK,KAAAC,OAAAuK,WAAA,oBAAAJ,QAAAA,IACApK,MAGAyK,iBAAA,SAAAvJ,GACAlB,KAAAkB,cAAAA,GAGAwJ,OAAA,WACA,MAAA1K,MAAAmK,UAAA,IAGAQ,QAAA,WACA,MAAA3K,MAAAmK,UAAA,IAGA5H,KAAA,WAKA,MAJAvC,MAAAa,OACAb,KAAA4H,QAAAgD,OAAA5K,KAAAa,KAAAgK,aACA7K,KAAA4H,QAAAkD,SAAA9K,KAAAC,OAAA8K,OAAAzC,UAAAtI,KAAAC,OAAAG,WAEAJ,MAGAsK,OAAA,WAGA,MAFAtK,MAAA4H,QAAAoD,UACAhL,KAAAa,KAAA,KACAb,MAGAgE,QAAA,WACA,GAAAhE,KAAAa,KAAA,CACA,GAAAoK,GAAAjL,KAAAa,KAAAgK,WACA,IAAA7K,KAAA6F,uBAAA,CACA,GAAAqF,GAAAlL,KAAAC,OAAAG,SAAA+K,yBAAAF,EACAC,GAAArL,EAAAyC,cAAA8I,SAAAF,GAAAG,QACAH,EAAA5J,SAAA2J,EAAA3J,SACA2J,EAAAC,EAEAlL,KAAAC,OAAAuK,WAAA,YAAAS,GACAjL,KAAAsK,SAEA,MAAAtK,OAGA+J,OAAA,WAEA,MADA/J,MAAAC,OAAAuK,WAAA,oBAAA,GACAxK,KAAAsK,aAiOAgB,eCjjBA,SAAAzL,GACA,YAuBAA,GAAAgI,iBAAA,SAAA9E,EAAAwI,GACA1L,EAAA2L,QAAAC,MAAAzL,KAAA0L,WAGA7L,EAAA8L,cAAA5I,GACA/C,KAAAsB,SAAAyB,EAAAwI,SAAAjK,UAAA,EAEAtB,KAAAsB,SAAAiK,EAAAjK,UAAA,GAIAzB,EAAAgI,iBAAA5C,UAAApF,EAAAyF,OAAAsG,OAAAC,OAAAhM,EAAA2L,QAAAvG,YAMA6F,SAAA,WACAjL,EAAA2L,QAAAvG,UAAA6F,SAAAW,MAAAzL,KAAA0L,WACA1L,KAAA8G,MAAAkD,UAAAhK,KAAA8G,MAAAkD,UAAA8B,QAAA,oBAAA,IACA,WAAA9L,KAAAsB,SAAA,QAQAsJ,OAAA,SAAAW,GACA1L,EAAA2L,QAAAvG,UAAA2F,OAAAa,MAAAzL,KAAA0L,WACA1L,KAAAsB,SAAAiK,EAAAjK,UAAA,MAIAgK,eC1DA,SAAAzL,GACA,YAeAA,GAAAyC,cAAA,SAAA3B,EAAAC,EAAAiB,EAAAC,EAAAR,GACAzB,EAAAsC,KAAAsJ,MAAAzL,MAAAW,EAAAC,EAAAiB,EAAAC,IAOA9B,KAAAsB,SAAAA,GAAA,GAGAzB,EAAAyC,cAAA8I,SAAA,SAAAvK,GACA,MAAA,IAAAhB,GAAAyC,cACAzB,EAAAF,EACAE,EAAAD,EACAC,EAAAgB,MACAhB,EAAAiB,SAIAjC,EAAAyC,cAAA2C,UAAApF,EAAAyF,OAAAsG,OAAAC,OAAAhM,EAAAsC,KAAA8C,YAMAjE,MAAA,WACA,MAAA,IAAAnB,GAAAyC,cAAAtC,KAAAW,EAAAX,KAAAY,EAAAZ,KAAA6B,MAAA7B,KAAA8B,OAAA9B,KAAAsB,WASAyK,OAAA,SAAAC,GACA,MAAAnM,GAAAsC,KAAA8C,UAAA8G,OAAAN,MAAAzL,MAAAgM,KACAhM,KAAAsB,WAAA0K,EAAA1K,UASA2K,SAAA,WACA,MAAA,IACA1K,KAAA8J,MAAA,IAAArL,KAAAW,GAAA,IAAA,IACAY,KAAA8J,MAAA,IAAArL,KAAAY,GAAA,IAAA,IACAW,KAAA8J,MAAA,IAAArL,KAAA6B,OAAA,IAAA,IACAN,KAAA8J,MAAA,IAAArL,KAAA8B,QAAA,IAAA,IACAP,KAAA8J,MAAA,IAAArL,KAAAsB,UAAA,IACA,KAGA4K,gBAAA,WACA,GAAAC,GAAAnM,KAAAgB,OAKA,OAJAmL,GAAAtK,MAAA7B,KAAA8B,OACAqK,EAAArK,OAAA9B,KAAA6B,MACAsK,EAAAxL,IAAAX,KAAA6B,MAAA7B,KAAA8B,QAAA,EACAqK,EAAAvL,IAAAZ,KAAA8B,OAAA9B,KAAA6B,OAAA,EACAsK,GAOA9I,kBAAA,WACA,MAAArD,MAAAsB,UAAA,IAAAC,KAAAC,KAQAJ,mBAAA,SAAAuD,GACA,GAAAyH,GAAAzH,EAAAjB,MAAA1D,KAAAuD,YACA,OAAAhC,MAAAiD,MAAA4H,EAAAzL,EAAAyL,EAAAxL,IAQAyK,MAAA,WACA,MAAA,IAAAxL,GAAAyC,cACAf,KAAA8J,MAAArL,KAAAW,GACAY,KAAA8J,MAAArL,KAAAY,GACAW,KAAA8J,MAAArL,KAAA6B,OACAN,KAAA8J,MAAArL,KAAA8B,QACA9B,KAAAsB,WASAuJ,UAAA,WACA,GAAAwB,GAAArM,KAAAgB,OAUA,OATAqL,GAAAxK,MAAA,IACAwK,EAAA1L,GAAA0L,EAAAxK,MACAwK,EAAAxK,WAEAwK,EAAAvK,OAAA,IACAuK,EAAAzL,GAAAyL,EAAAvK,OACAuK,EAAAvK,YAEAuK,EAAA/K,UAAAC,KAAAC,GACA6K,GAQAnK,OAAA,SAAAoK,GAWA,IAAA,GAVAzL,GAAAb,KAAA6K,YACA3D,GACArG,EAAA0L,aACA1L,EAAA2L,cACA3L,EAAA4L,iBACA5L,EAAA6L,iBAEAtJ,EAAAvC,EAAA0C,YACAjC,EAAAT,EAAAwC,oBACAsJ,EAAAL,EAAAG,iBACAtF,EAAA,EAAAA,EAAA,EAAAA,IAEA,GADAD,EAAAC,GAAAD,EAAAC,GAAA7D,OAAAhC,EAAA8B,GACA8D,EAAAC,GAAAxG,EAAA2L,EAAA3L,GAAAuG,EAAAC,GAAAxG,EAAAgM,EAAAhM,GACAuG,EAAAC,GAAAvG,EAAA0L,EAAA1L,GAAAsG,EAAAC,GAAAvG,EAAA+L,EAAA/L,EACA,OAAA,CAGA,QAAA,GAQAgM,eAAA,WACA,GAAAC,EAUA,OATA7M,MAAAsB,SAAAC,KAAAC,OACAqL,EAAA7M,KAAAkM,kBACAW,EAAAvL,UAAAC,KAAAC,GAAA,GACAxB,KAAAsB,SAAAC,KAAAC,GAAA,GACAqL,EAAA7M,KAAAkM,kBACAW,EAAAvL,UAAAC,KAAAC,GAAA,GAEAqL,EAAA7M,KAAAgB,QAEA6L,MAIAvB","file":"openseadragonselection.js","sourcesContent":["(function($) {\n    'use strict';\n\n    if (!$.version || $.version.major < 2) {\n        throw new Error('This version of OpenSeadragonSelection requires OpenSeadragon version 2.0.0+');\n    }\n\n    $.Viewer.prototype.selection = function(options) {\n        if (!this.selectionInstance || options) {\n            options = options || {};\n            options.viewer = this;\n            this.selectionInstance = new $.Selection(options);\n        }\n        return this.selectionInstance;\n    };\n\n\n    /**\n    * @class Selection\n    * @classdesc Provides functionality for selecting part of an image\n    * @memberof OpenSeadragon\n    * @param {Object} options\n    */\n    $.Selection = function ( options ) {\n\n        $.extend( true, this, {\n            // internal state properties\n            viewer:                  null,\n            isSelecting:             false,\n            buttonActiveImg:         false,\n            rectDone:                true,\n\n            // options\n            element:                 null,\n            toggleButton:            null,\n            showSelectionControl:    true,\n            showConfirmDenyButtons:  true,\n            styleConfirmDenyButtons: true,\n            returnPixelCoordinates:  true,\n            keyboardShortcut:        'c',\n            rect:                    null,\n            allowRotation:           true,\n            startRotated:            false, // useful for rotated crops\n            startRotatedHeight:      0.1,\n            restrictToImage:         false,\n            onSelection:             null,\n            prefixUrl:               null,\n            navImages:               {\n                selection: {\n                    REST:   'selection_rest.png',\n                    GROUP:  'selection_grouphover.png',\n                    HOVER:  'selection_hover.png',\n                    DOWN:   'selection_pressed.png'\n                },\n                selectionConfirm: {\n                    REST:   'selection_confirm_rest.png',\n                    GROUP:  'selection_confirm_grouphover.png',\n                    HOVER:  'selection_confirm_hover.png',\n                    DOWN:   'selection_confirm_pressed.png'\n                },\n                selectionCancel: {\n                    REST:   'selection_cancel_rest.png',\n                    GROUP:  'selection_cancel_grouphover.png',\n                    HOVER:  'selection_cancel_hover.png',\n                    DOWN:   'selection_cancel_pressed.png'\n                },\n            },\n            handleStyle: {\n                top:        '50%',\n                left:       '50%',\n                width:      '6px',\n                height:     '6px',\n                margin:     '-4px 0 0 -4px',\n                background: '#000',\n                border:     '1px solid #ccc'\n            },\n            cornersStyle: {\n                width:      '6px',\n                height:     '6px',\n                background: '#000',\n                border:     '1px solid #ccc'\n            }\n\n        }, options );\n\n        $.extend( true, this.navImages, this.viewer.navImages );\n\n        if (!this.element) {\n            this.element = $.makeNeutralElement('div');\n            this.element.style.background = 'rgba(0, 0, 0, 0.1)';\n            this.element.className        = 'selection-box';\n        }\n        this.borders = this.borders || [];\n        var handle;\n        var corners = [];\n        for (var i = 0; i < 4; i++) {\n            if (!this.borders[i]) {\n                this.borders[i]                  = $.makeNeutralElement('div');\n                this.borders[i].className        = 'border-' + i;\n                this.borders[i].style.position   = 'absolute';\n                this.borders[i].style.width      = '1px';\n                this.borders[i].style.height     = '1px';\n                this.borders[i].style.background = '#fff';\n            }\n\n            handle                  = $.makeNeutralElement('div');\n            handle.className        = 'border-' + i + '-handle';\n            handle.style.position   = 'absolute';\n            handle.style.top        = this.handleStyle.top;\n            handle.style.left       = this.handleStyle.left;\n            handle.style.width      = this.handleStyle.width;\n            handle.style.height     = this.handleStyle.height;\n            handle.style.margin     = this.handleStyle.margin;\n            handle.style.background = this.handleStyle.background;\n            handle.style.border     = this.handleStyle.border;\n            new $.MouseTracker({\n                element:     this.borders[i],\n                dragHandler: onBorderDrag.bind(this, i),\n                dragEndHandler: onBorderDragEnd.bind(this, i),\n            });\n\n            corners[i]                  = $.makeNeutralElement('div');\n            corners[i].className        = 'corner-' + i + '-handle';\n            corners[i].style.position   = 'absolute';\n            corners[i].style.width      = this.cornersStyle.width;\n            corners[i].style.height     = this.cornersStyle.height;\n            corners[i].style.background = this.cornersStyle.background;\n            corners[i].style.border     = this.cornersStyle.border;\n            new $.MouseTracker({\n                element:     corners[i],\n                dragHandler: onBorderDrag.bind(this, i + 0.5),\n                dragEndHandler: onBorderDragEnd.bind(this, i),\n            });\n\n            this.borders[i].appendChild(handle);\n            this.element.appendChild(this.borders[i]);\n            // defer corners, so they are appended last\n            setTimeout(this.element.appendChild.bind(this.element, corners[i]), 0);\n        }\n        this.borders[0].style.top = 0;\n        this.borders[0].style.width = '100%';\n        this.borders[1].style.right = 0;\n        this.borders[1].style.height = '100%';\n        this.borders[2].style.bottom = 0;\n        this.borders[2].style.width = '100%';\n        this.borders[3].style.left = 0;\n        this.borders[3].style.height = '100%';\n        corners[0].style.top = '-3px';\n        corners[0].style.left = '-3px';\n        corners[1].style.top = '-3px';\n        corners[1].style.right = '-3px';\n        corners[2].style.bottom = '-3px';\n        corners[2].style.right = '-3px';\n        corners[3].style.bottom = '-3px';\n        corners[3].style.left = '-3px';\n\n        if (!this.overlay) {\n            this.overlay = new $.SelectionOverlay(this.element, this.rect || new $.SelectionRect());\n        }\n\n        this.innerTracker = new $.MouseTracker({\n            element:            this.element,\n            clickTimeThreshold: this.viewer.clickTimeThreshold,\n            clickDistThreshold: this.viewer.clickDistThreshold,\n            dragHandler:        $.delegate( this, onInsideDrag ),\n            dragEndHandler:     $.delegate( this, onInsideDragEnd ),\n            // keyHandler:         $.delegate( this, onKeyPress ),\n            clickHandler:       $.delegate( this, onClick ),\n            // scrollHandler:      $.delegate( this.viewer, this.viewer.innerTracker.scrollHandler ),\n            // pinchHandler:       $.delegate( this.viewer, this.viewer.innerTracker.pinchHandler ),\n        });\n\n        this.outerTracker = new $.MouseTracker({\n            element:            this.viewer.canvas,\n            clickTimeThreshold: this.viewer.clickTimeThreshold,\n            clickDistThreshold: this.viewer.clickDistThreshold,\n            dragHandler:        $.delegate( this, onOutsideDrag ),\n            dragEndHandler:     $.delegate( this, onOutsideDragEnd ),\n            clickHandler:       $.delegate( this, onClick ),\n            startDisabled:      !this.isSelecting,\n        });\n\n        if (this.keyboardShortcut) {\n            $.addEvent(\n                this.viewer.container,\n                'keypress',\n                $.delegate(this, onKeyPress),\n                false\n            );\n        }\n\n        var prefix = this.prefixUrl || this.viewer.prefixUrl || '';\n        var useGroup = this.viewer.buttons && this.viewer.buttons.buttons;\n        var anyButton = useGroup ? this.viewer.buttons.buttons[0] : null;\n        var onFocusHandler = anyButton ? anyButton.onFocus : null;\n        var onBlurHandler = anyButton ? anyButton.onBlur : null;\n        if (this.showSelectionControl) {\n            this.toggleButton = new $.Button({\n                element:    this.toggleButton ? $.getElement( this.toggleButton ) : null,\n                clickTimeThreshold: this.viewer.clickTimeThreshold,\n                clickDistThreshold: this.viewer.clickDistThreshold,\n                tooltip:    $.getString('Tooltips.SelectionToggle') || 'Toggle selection',\n                srcRest:    prefix + this.navImages.selection.REST,\n                srcGroup:   prefix + this.navImages.selection.GROUP,\n                srcHover:   prefix + this.navImages.selection.HOVER,\n                srcDown:    prefix + this.navImages.selection.DOWN,\n                onRelease:  this.toggleState.bind( this ),\n                onFocus:    onFocusHandler,\n                onBlur:     onBlurHandler\n            });\n            if (useGroup) {\n                this.viewer.buttons.buttons.push(this.toggleButton);\n                this.viewer.buttons.element.appendChild(this.toggleButton.element);\n            }\n            if (this.toggleButton.imgDown) {\n                this.buttonActiveImg = this.toggleButton.imgDown.cloneNode(true);\n                this.toggleButton.element.appendChild(this.buttonActiveImg);\n            }\n        }\n        if (this.showConfirmDenyButtons) {\n            this.confirmButton = new $.Button({\n                element:    this.confirmButton ? $.getElement( this.confirmButton ) : null,\n                clickTimeThreshold: this.viewer.clickTimeThreshold,\n                clickDistThreshold: this.viewer.clickDistThreshold,\n                tooltip:    $.getString('Tooltips.SelectionConfirm') || 'Confirm selection',\n                srcRest:    prefix + this.navImages.selectionConfirm.REST,\n                srcGroup:   prefix + this.navImages.selectionConfirm.GROUP,\n                srcHover:   prefix + this.navImages.selectionConfirm.HOVER,\n                srcDown:    prefix + this.navImages.selectionConfirm.DOWN,\n                onRelease:  this.confirm.bind( this ),\n                onFocus:    onFocusHandler,\n                onBlur:     onBlurHandler\n            });\n            var confirm = this.confirmButton.element;\n            confirm.classList.add('confirm-button');\n            this.element.appendChild(confirm);\n\n            this.cancelButton = new $.Button({\n                element:    this.cancelButton ? $.getElement( this.cancelButton ) : null,\n                clickTimeThreshold: this.viewer.clickTimeThreshold,\n                clickDistThreshold: this.viewer.clickDistThreshold,\n                tooltip:    $.getString('Tooltips.SelectionConfirm') || 'Cancel selection',\n                srcRest:    prefix + this.navImages.selectionCancel.REST,\n                srcGroup:   prefix + this.navImages.selectionCancel.GROUP,\n                srcHover:   prefix + this.navImages.selectionCancel.HOVER,\n                srcDown:    prefix + this.navImages.selectionCancel.DOWN,\n                onRelease:  this.cancel.bind( this ),\n                onFocus:    onFocusHandler,\n                onBlur:     onBlurHandler\n            });\n            var cancel = this.cancelButton.element;\n            cancel.classList.add('cancel-button');\n            this.element.appendChild(cancel);\n\n            if (this.styleConfirmDenyButtons) {\n                confirm.style.position = 'absolute';\n                confirm.style.top = '50%';\n                confirm.style.left = '50%';\n                confirm.style.transform = 'translate(-100%, -50%)';\n\n                cancel.style.position = 'absolute';\n                cancel.style.top = '50%';\n                cancel.style.left = '50%';\n                cancel.style.transform = 'translate(0, -50%)';\n            }\n        }\n\n        this.viewer.addHandler('selection', this.onSelection);\n\n        this.viewer.addHandler('open', this.draw.bind(this));\n        this.viewer.addHandler('animation', this.draw.bind(this));\n        this.viewer.addHandler('resize', this.draw.bind(this));\n        this.viewer.addHandler('rotate', this.draw.bind(this));\n    };\n\n    $.extend( $.Selection.prototype, $.ControlDock.prototype, /** @lends OpenSeadragon.Selection.prototype */{\n\n        toggleState: function() {\n            return this.setState(!this.isSelecting);\n        },\n\n        setState: function(enabled) {\n            this.isSelecting = enabled;\n            // this.viewer.innerTracker.setTracking(!enabled);\n            this.outerTracker.setTracking(enabled);\n            enabled ? this.draw() : this.undraw();\n            if (this.buttonActiveImg) {\n                this.buttonActiveImg.style.visibility = enabled ? 'visible' : 'hidden';\n            }\n            this.viewer.raiseEvent('selection_toggle', {enabled: enabled});\n            return this;\n        },\n\n        setAllowRotation: function(allowRotation) {\n            this.allowRotation = allowRotation;\n        },\n\n        enable: function() {\n            return this.setState(true);\n        },\n\n        disable: function() {\n            return this.setState(false);\n        },\n\n        draw: function() {\n            if (this.rect) {\n                this.overlay.update(this.rect.normalize());\n                this.overlay.drawHTML(this.viewer.drawer.container, this.viewer.viewport);\n            }\n            return this;\n        },\n\n        undraw: function() {\n            this.overlay.destroy();\n            this.rect = null;\n            return this;\n        },\n\n        confirm: function() {\n            if (this.rect) {\n                var result = this.rect.normalize();\n                if (this.returnPixelCoordinates) {\n                    var real = this.viewer.viewport.viewportToImageRectangle(result);\n                    real = $.SelectionRect.fromRect(real).round();\n                    real.rotation = result.rotation;\n                    result = real;\n                }\n                this.viewer.raiseEvent('selection', result);\n                this.undraw();\n            }\n            return this;\n        },\n\n        cancel: function() {\n            this.viewer.raiseEvent('selection_cancel', false);\n            return this.undraw();\n        },\n    });\n\n    function onOutsideDrag(e) {\n        // Disable move when makeing new selection\n        this.viewer.setMouseNavEnabled(false);\n        var delta = this.viewer.viewport.deltaPointsFromPixels(e.delta, true);\n        var end = this.viewer.viewport.pointFromPixel(e.position, true);\n        var start = new $.Point(end.x - delta.x, end.y - delta.y);\n        if (!this.rect) {\n            if (this.restrictToImage) {\n                if (!pointIsInImage(this, start)) {\n                    return;\n                }\n                restrictVector(delta, end);\n            }\n            if (this.startRotated) {\n                this.rotatedStartPoint = start;\n                this.rect = getPrerotatedRect(start, end, this.startRotatedHeight);\n            } else {\n                this.rect = new $.SelectionRect(start.x, start.y, delta.x, delta.y);\n            }\n            this.rectDone = false;\n        } else {\n            var oldRect;\n            if (this.restrictToImage) {\n                oldRect = this.rect.clone();\n            }\n            if (this.rectDone) {\n                // All rotation as needed.\n                if (this.allowRotation) {\n                    var angle1 = this.rect.getAngleFromCenter(start);\n                    var angle2 = this.rect.getAngleFromCenter(end);\n                    this.rect.rotation = (this.rect.rotation + angle1 - angle2) % Math.PI;\n                }\n            } else {\n                if (this.startRotated) {\n                    this.rect = getPrerotatedRect(this.rotatedStartPoint, end, this.startRotatedHeight);\n                } else {\n                    this.rect.width += delta.x;\n                    this.rect.height += delta.y;\n                }\n            }\n            var bounds = this.viewer.world.getHomeBounds();\n            if (this.restrictToImage && !this.rect.fitsIn(new $.Rect(0, 0, bounds.width, bounds.height))) {\n                this.rect = oldRect;\n            }\n        }\n        this.draw();\n    }\n\n    function onOutsideDragEnd() {\n        // Resizing a selection will function\n        // when drawn any direction\n        if (this.rect.width < 0){\n            this.rect.x += this.rect.width;\n            this.rect.width = Math.abs(this.rect.width);\n        }\n        if (this.rect.height < 0){\n            this.rect.y += this.rect.height;\n            this.rect.height = Math.abs(this.rect.height);\n        }\n        \n        // Eable move after new selection is done\n        this.viewer.setMouseNavEnabled(true);\n        this.rectDone = true;\n    }\n\n    function onClick() {\n        this.viewer.canvas.focus();\n    }\n\n    function onInsideDrag(e) {\n        $.addClass(this.element, 'dragging');\n        var delta = this.viewer.viewport.deltaPointsFromPixels(e.delta, true);\n        this.rect.x += delta.x;\n        this.rect.y += delta.y;\n        var bounds = this.viewer.world.getHomeBounds();\n        if (this.restrictToImage && !this.rect.fitsIn(new $.Rect(0, 0, bounds.width, bounds.height))) {\n            this.rect.x -= delta.x;\n            this.rect.y -= delta.y;\n        }\n        this.draw();\n    }\n\n    function onInsideDragEnd() {\n        $.removeClass(this.element, 'dragging');\n    }\n\n    function onBorderDrag(border, e) {\n        var delta = e.delta;\n        var rotation = this.rect.getDegreeRotation();\n        var center;\n        var oldRect = this.restrictToImage ? this.rect.clone() : null;\n        if (rotation !== 0) {\n            // adjust vector\n            delta = delta.rotate(-1 * rotation, new $.Point(0, 0));\n            center = this.rect.getCenter();\n        }\n        delta = this.viewer.viewport.deltaPointsFromPixels(delta, true);\n        switch (border) {\n            case 0:\n                this.rect.y += delta.y;\n                this.rect.height -= delta.y;\n                break;\n            case 1:\n                this.rect.width += delta.x;\n                break;\n            case 2:\n                this.rect.height += delta.y;\n                break;\n            case 3:\n                this.rect.x += delta.x;\n                this.rect.width -= delta.x;\n                break;\n            case 0.5:\n                this.rect.y += delta.y;\n                this.rect.height -= delta.y;\n                this.rect.x += delta.x;\n                this.rect.width -= delta.x;\n                break;\n            case 1.5:\n                this.rect.y += delta.y;\n                this.rect.height -= delta.y;\n                this.rect.width += delta.x;\n                break;\n            case 2.5:\n                this.rect.width += delta.x;\n                this.rect.height += delta.y;\n                break;\n            case 3.5:\n                this.rect.height += delta.y;\n                this.rect.x += delta.x;\n                this.rect.width -= delta.x;\n                break;\n        }\n        if (rotation !== 0) {\n            // calc center deviation\n            var newCenter = this.rect.getCenter();\n            // rotate new center around old\n            var target = newCenter.rotate(rotation, center);\n            // adjust new center\n            delta = target.minus(newCenter);\n            this.rect.x += delta.x;\n            this.rect.y += delta.y;\n        }\n        var bounds = this.viewer.world.getHomeBounds();\n        if (this.restrictToImage && !this.rect.fitsIn(new $.Rect(0, 0, bounds.width, bounds.height))) {\n            this.rect = oldRect;\n        }\n        this.draw();\n    }\n    \n    // After you have completed dragging, ensure the top left of the selection\n    // box is still the top left corner of the box\n    function onBorderDragEnd(){\n        if (this.rect.width < 0){\n            this.rect.x += this.rect.width;\n            this.rect.width = Math.abs(this.rect.width);\n        }\n        if (this.rect.height < 0){\n            this.rect.y += this.rect.height;\n            this.rect.height = Math.abs(this.rect.height);\n        }\n    }\n\n    function onKeyPress(e) {\n        var key = e.keyCode ? e.keyCode : e.charCode;\n        if (key === 13) {\n            this.confirm();\n        } else if (String.fromCharCode(key) === this.keyboardShortcut) {\n            this.toggleState();\n        }\n    }\n\n    function getPrerotatedRect(start, end, height) {\n        if (start.x > end.x) {\n            // always draw left to right\n            var x = start;\n            start = end;\n            end = x;\n        }\n        var delta = end.minus(start);\n        var dist = start.distanceTo(end);\n        var angle = -1 * Math.atan2(delta.x, delta.y) + (Math.PI / 2);\n        var center = new $.Point(\n            delta.x / 2 + start.x,\n            delta.y / 2 + start.y\n        );\n        var rect = new $.SelectionRect(\n            center.x - (dist / 2),\n            center.y - (height / 2),\n            dist,\n            height,\n            angle\n        );\n        var heightModDelta = new $.Point(0, height);\n        heightModDelta = heightModDelta.rotate(rect.getDegreeRotation(), new $.Point(0, 0));\n        rect.x += heightModDelta.x / 2;\n        rect.y += heightModDelta.y / 2;\n        return rect;\n    }\n\n    function pointIsInImage(self, point) {\n        var bounds = self.viewer.world.getHomeBounds();\n        return point.x >= 0 && point.x <= bounds.width && point.y >= 0 && point.y <= bounds.height;\n    }\n\n    function restrictVector(delta, end) {\n        var start;\n        for (var prop in {x: 0, y: 0}) {\n            start = end[prop] - delta[prop];\n            if (start < 1 && start > 0) {\n                if (end[prop] > 1) {\n                    delta[prop] -= end[prop] - 1;\n                    end[prop] = 1;\n                } else if (end[prop] < 0) {\n                    delta[prop] -= end[prop];\n                    end[prop] = 0;\n                }\n            }\n        }\n    }\n\n})(OpenSeadragon);\n","(function( $ ){\n    'use strict';\n\n    /**\n     * @class Overlay\n     * @classdesc Provides a way to float an HTML element on top of the viewer element.\n     *\n     * @memberof OpenSeadragon\n     * @param {Object} options\n     * @param {Element} options.element\n     * @param {OpenSeadragon.Point|OpenSeadragon.Rect|OpenSeadragon.SelectionRect} options.location - The\n     * location of the overlay on the image. If a {@link OpenSeadragon.Point}\n     * is specified, the overlay will keep a constant size independently of the\n     * zoom. If a {@link OpenSeadragon.Rect} is specified, the overlay size will\n     * be adjusted when the zoom changes.\n     * @param {OpenSeadragon.OverlayPlacement} [options.placement=OpenSeadragon.OverlayPlacement.TOP_LEFT]\n     * Relative position to the viewport.\n     * Only used if location is a {@link OpenSeadragon.Point}.\n     * @param {OpenSeadragon.Overlay.OnDrawCallback} [options.onDraw]\n     * @param {Boolean} [options.checkResize=true] Set to false to avoid to\n     * check the size of the overlay everytime it is drawn when using a\n     * {@link OpenSeadragon.Point} as options.location. It will improve\n     * performances but will cause a misalignment if the overlay size changes.\n     */\n    $.SelectionOverlay = function( element, location) {\n        $.Overlay.apply( this, arguments );\n\n        // set the rotation in radians\n        if ( $.isPlainObject( element ) ) {\n            this.rotation = element.location.rotation || 0;\n        } else {\n            this.rotation = location.rotation || 0;\n        }\n    };\n\n    $.SelectionOverlay.prototype = $.extend( Object.create($.Overlay.prototype), {\n\n        /**\n         * @function\n         * @param {Element} container\n         */\n        drawHTML: function() {\n            $.Overlay.prototype.drawHTML.apply( this, arguments );\n            this.style.transform = this.style.transform.replace(/ ?rotate\\(.+rad\\)/, '') +\n                ' rotate(' + this.rotation + 'rad)';\n        },\n\n        /**\n         * @function\n         * @param {OpenSeadragon.Point|OpenSeadragon.Rect} location\n         * @param {OpenSeadragon.OverlayPlacement} position\n         */\n        update: function( location ) {\n            $.Overlay.prototype.update.apply( this, arguments );\n            this.rotation = location.rotation || 0;\n        }\n    });\n\n}( OpenSeadragon ));\n","(function( $ ){\n    'use strict';\n\n    /**\n     * @class SelectionRect\n     * @classdesc A display rectangle is very similar to {@link OpenSeadragon.Rect} but adds rotation\n     * around the center point\n     *\n     * @memberof OpenSeadragon\n     * @extends OpenSeadragon.Rect\n     * @param {Number} x The vector component 'x'.\n     * @param {Number} y The vector component 'y'.\n     * @param {Number} width The vector component 'height'.\n     * @param {Number} height The vector component 'width'.\n     * @param {Number} rotation The rotation in radians\n     */\n    $.SelectionRect = function( x, y, width, height, rotation ) {\n        $.Rect.apply( this, [ x, y, width, height ] );\n\n        /**\n         * The rotation in radians\n         * @member {Number} rotation\n         * @memberof OpenSeadragon.SelectionRect#\n         */\n        this.rotation = rotation || 0;\n    };\n\n    $.SelectionRect.fromRect = function(rect) {\n        return new $.SelectionRect(\n            rect.x,\n            rect.y,\n            rect.width,\n            rect.height\n        );\n    };\n\n    $.SelectionRect.prototype = $.extend( Object.create($.Rect.prototype), {\n\n        /**\n         * @function\n         * @returns {OpenSeadragon.Rect} a duplicate of this Rect\n         */\n        clone: function() {\n            return new $.SelectionRect(this.x, this.y, this.width, this.height, this.rotation);\n        },\n\n        /**\n         * Determines if two Rectangles have equivalent components.\n         * @function\n         * @param {OpenSeadragon.Rect} rectangle The Rectangle to compare to.\n         * @return {Boolean} 'true' if all components are equal, otherwise 'false'.\n         */\n        equals: function( other ) {\n            return $.Rect.prototype.equals.apply(this, [ other ]) &&\n                ( this.rotation === other.rotation );\n        },\n\n        /**\n         * Provides a string representation of the rectangle which is useful for\n         * debugging.\n         * @function\n         * @returns {String} A string representation of the rectangle.\n         */\n        toString: function() {\n            return '[' +\n                (Math.round(this.x*100) / 100) + ',' +\n                (Math.round(this.y*100) / 100) + ',' +\n                (Math.round(this.width*100) / 100) + 'x' +\n                (Math.round(this.height*100) / 100) + '@' +\n                (Math.round(this.rotation*100) / 100) +\n            ']';\n        },\n\n        swapWidthHeight: function() {\n            var swapped = this.clone();\n            swapped.width = this.height;\n            swapped.height = this.width;\n            swapped.x += (this.width - this.height) / 2;\n            swapped.y += (this.height - this.width) / 2;\n            return swapped;\n        },\n\n        /**\n         * @function\n         * @returns {Number} The rotaion in degrees\n         */\n        getDegreeRotation: function() {\n            return this.rotation * (180/Math.PI);\n        },\n\n        /**\n         * @function\n         * @param {OpenSeadragon.Point} point\n         * @returns {Number} The angle in radians\n         */\n        getAngleFromCenter: function(point) {\n            var diff = point.minus(this.getCenter());\n            return Math.atan2(diff.x, diff.y);\n        },\n\n        /**\n         * Rounds pixel coordinates\n         * @function\n         * @returns {SelectionRect} The altered rect\n         */\n        round: function() {\n            return new $.SelectionRect(\n                Math.round(this.x),\n                Math.round(this.y),\n                Math.round(this.width),\n                Math.round(this.height),\n                this.rotation\n            );\n        },\n\n        /**\n         * Fixes negative width/height, rotation larger than PI\n         * @function\n         * @returns {SelectionRect} The normalized rect\n         */\n        normalize: function() {\n            var fixed = this.clone();\n            if (fixed.width < 0) {\n                fixed.x += fixed.width;\n                fixed.width *= -1;\n            }\n            if (fixed.height < 0) {\n                fixed.y += fixed.height;\n                fixed.height *= -1;\n            }\n            fixed.rotation %= Math.PI;\n            return fixed;\n        },\n\n        /**\n         * @function\n         * @param {OpenSeadragon.Rect} area\n         * @returns {Boolean} Does this rect fit in a specified area\n         */\n        fitsIn: function(area) {\n            var rect = this.normalize();\n            var corners = [\n                rect.getTopLeft(),\n                rect.getTopRight(),\n                rect.getBottomRight(),\n                rect.getBottomLeft(),\n            ];\n            var center = rect.getCenter();\n            var rotation = rect.getDegreeRotation();\n            var areaEnd = area.getBottomRight();\n            for (var i = 0; i < 4; i++) {\n                corners[i] = corners[i].rotate(rotation, center);\n                if (corners[i].x < area.x || corners[i].x > areaEnd.x ||\n                    corners[i].y < area.y || corners[i].y > areaEnd.y) {\n                    return false;\n                }\n            }\n            return true;\n        },\n\n        /**\n         * Reduces rotation to within [-45, 45] degrees by swapping width & height\n         * @function\n         * @returns {SelectionRect} The altered rect\n         */\n        reduceRotation: function() {\n            var reduced;\n            if (this.rotation < Math.PI / (-4)) {\n                reduced = this.swapWidthHeight();\n                reduced.rotation += Math.PI / 2;\n            } else if (this.rotation > Math.PI / 4) {\n                reduced = this.swapWidthHeight();\n                reduced.rotation -= Math.PI / 2;\n            } else {\n                reduced = this.clone();\n            }\n            return reduced;\n        },\n    });\n\n}( OpenSeadragon ));\n"]}