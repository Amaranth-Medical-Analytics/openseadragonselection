{"version":3,"sources":["selection.js","selectionoverlay.js","selectionrect.js"],"names":["$","onOutsideDrag","e","this","viewer","setMouseNavEnabled","delta","viewport","deltaPointsFromPixels","end","pointFromPixel","position","start","Point","x","y","rect","oldRect","restrictToImage","clone","rectDone","angle1","getAngleFromCenter","angle2","rotation","Math","PI","startRotated","getPrerotatedRect","rotatedStartPoint","startRotatedHeight","width","height","fitsIn","Rect","pointIsInImage","restrictVector","SelectionRect","draw","onOutsideDragEnd","onClick","canvas","focus","onInsideDrag","addClass","element","onInsideDragEnd","removeClass","onBorderDrag","border","center","getDegreeRotation","rotate","getCenter","newCenter","target","minus","onKeyPress","key","keyCode","charCode","confirm","String","fromCharCode","keyboardShortcut","toggleState","dist","distanceTo","angle","atan2","heightModDelta","point","prop","version","major","Error","Viewer","prototype","selection","options","selectionInstance","Selection","extend","isSelecting","buttonActiveImg","toggleButton","showSelectionControl","showConfirmDenyButtons","styleConfirmDenyButtons","returnPixelCoordinates","onSelection","prefixUrl","navImages","REST","GROUP","HOVER","DOWN","selectionConfirm","selectionCancel","makeNeutralElement","style","background","className","borders","handle","corners","i","top","left","margin","MouseTracker","dragHandler","bind","appendChild","setTimeout","right","bottom","overlay","SelectionOverlay","innerTracker","clickTimeThreshold","clickDistThreshold","delegate","dragEndHandler","clickHandler","outerTracker","startDisabled","addEvent","container","prefix","useGroup","buttons","anyButton","onFocusHandler","onFocus","onBlurHandler","onBlur","Button","getElement","tooltip","getString","srcRest","srcGroup","srcHover","srcDown","onRelease","push","imgDown","cloneNode","confirmButton","classList","add","cancelButton","cancel","transform","addHandler","ControlDock","setState","enabled","setTracking","undraw","visibility","raiseEvent","enable","disable","update","normalize","drawHTML","drawer","destroy","result","real","viewportToImageRectangle","fromRect","round","OpenSeadragon","location","Overlay","apply","arguments","isPlainObject","Object","create","replace","equals","other","toString","swapWidthHeight","swapped","diff","fixed","area","getTopLeft","getTopRight","getBottomRight","getBottomLeft","areaEnd","reduceRotation","reduced"],"mappings":"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","file":"openseadragonselection.js","sourcesContent":["(function($) {\n    'use strict';\n\n    if (!$.version || $.version.major < 2) {\n        throw new Error('This version of OpenSeadragonSelection requires OpenSeadragon version 2.0.0+');\n    }\n\n    $.Viewer.prototype.selection = function(options) {\n        if (!this.selectionInstance || options) {\n            options = options || {};\n            options.viewer = this;\n            this.selectionInstance = new $.Selection(options);\n        }\n        return this.selectionInstance;\n    };\n\n\n    /**\n    * @class Selection\n    * @classdesc Provides functionality for selecting part of an image\n    * @memberof OpenSeadragon\n    * @param {Object} options\n    */\n    $.Selection = function ( options ) {\n\n        $.extend( true, this, {\n            // internal state properties\n            viewer:                  null,\n            isSelecting:             false,\n            buttonActiveImg:         false,\n            rectDone:                true,\n\n            // options\n            element:                 null,\n            toggleButton:            null,\n            showSelectionControl:    true,\n            showConfirmDenyButtons:  true,\n            styleConfirmDenyButtons: true,\n            returnPixelCoordinates:  true,\n            keyboardShortcut:        'c',\n            rect:                    null,\n            startRotated:            false, // useful for rotated crops\n            startRotatedHeight:      0.1,\n            restrictToImage:         false,\n            onSelection:             null,\n            prefixUrl:               null,\n            navImages:               {\n                selection: {\n                    REST:   'selection_rest.png',\n                    GROUP:  'selection_grouphover.png',\n                    HOVER:  'selection_hover.png',\n                    DOWN:   'selection_pressed.png'\n                },\n                selectionConfirm: {\n                    REST:   'selection_confirm_rest.png',\n                    GROUP:  'selection_confirm_grouphover.png',\n                    HOVER:  'selection_confirm_hover.png',\n                    DOWN:   'selection_confirm_pressed.png'\n                },\n                selectionCancel: {\n                    REST:   'selection_cancel_rest.png',\n                    GROUP:  'selection_cancel_grouphover.png',\n                    HOVER:  'selection_cancel_hover.png',\n                    DOWN:   'selection_cancel_pressed.png'\n                },\n            }\n        }, options );\n\n        $.extend( true, this.navImages, this.viewer.navImages );\n\n        if (!this.element) {\n            this.element = $.makeNeutralElement('div');\n            this.element.style.background = 'rgba(0, 0, 0, 0.1)';\n            this.element.className        = 'selection-box';\n        }\n        this.borders = this.borders || [];\n        var handle;\n        var corners = [];\n        for (var i = 0; i < 4; i++) {\n            if (!this.borders[i]) {\n                this.borders[i]                  = $.makeNeutralElement('div');\n                this.borders[i].className        = 'border-' + i;\n                this.borders[i].style.position   = 'absolute';\n                this.borders[i].style.width      = '1px';\n                this.borders[i].style.height     = '1px';\n                this.borders[i].style.background = '#fff';\n            }\n\n            handle                  = $.makeNeutralElement('div');\n            handle.className        = 'border-' + i + '-handle';\n            handle.style.position   = 'absolute';\n            handle.style.top        = '50%';\n            handle.style.left       = '50%';\n            handle.style.width      = '6px';\n            handle.style.height     = '6px';\n            handle.style.margin     = '-4px 0 0 -4px';\n            handle.style.background = '#000';\n            handle.style.border     = '1px solid #ccc';\n            new $.MouseTracker({\n                element:     this.borders[i],\n                dragHandler: onBorderDrag.bind(this, i),\n            });\n\n            corners[i]                  = $.makeNeutralElement('div');\n            corners[i].className        = 'corner-' + i + '-handle';\n            corners[i].style.position   = 'absolute';\n            corners[i].style.width      = '6px';\n            corners[i].style.height     = '6px';\n            corners[i].style.background = '#000';\n            corners[i].style.border     = '1px solid #ccc';\n            new $.MouseTracker({\n                element:     corners[i],\n                dragHandler: onBorderDrag.bind(this, i + 0.5),\n            });\n\n            this.borders[i].appendChild(handle);\n            this.element.appendChild(this.borders[i]);\n            // defer corners, so they are appended last\n            setTimeout(this.element.appendChild.bind(this.element, corners[i]), 0);\n        }\n        this.borders[0].style.top = 0;\n        this.borders[0].style.width = '100%';\n        this.borders[1].style.right = 0;\n        this.borders[1].style.height = '100%';\n        this.borders[2].style.bottom = 0;\n        this.borders[2].style.width = '100%';\n        this.borders[3].style.left = 0;\n        this.borders[3].style.height = '100%';\n        corners[0].style.top = '-3px';\n        corners[0].style.left = '-3px';\n        corners[1].style.top = '-3px';\n        corners[1].style.right = '-3px';\n        corners[2].style.bottom = '-3px';\n        corners[2].style.right = '-3px';\n        corners[3].style.bottom = '-3px';\n        corners[3].style.left = '-3px';\n\n        if (!this.overlay) {\n            this.overlay = new $.SelectionOverlay(this.element, this.rect || new $.SelectionRect());\n        }\n\n        this.innerTracker = new $.MouseTracker({\n            element:            this.element,\n            clickTimeThreshold: this.viewer.clickTimeThreshold,\n            clickDistThreshold: this.viewer.clickDistThreshold,\n            dragHandler:        $.delegate( this, onInsideDrag ),\n            dragEndHandler:     $.delegate( this, onInsideDragEnd ),\n            // keyHandler:         $.delegate( this, onKeyPress ),\n            clickHandler:       $.delegate( this, onClick ),\n            // scrollHandler:      $.delegate( this.viewer, this.viewer.innerTracker.scrollHandler ),\n            // pinchHandler:       $.delegate( this.viewer, this.viewer.innerTracker.pinchHandler ),\n        });\n\n        this.outerTracker = new $.MouseTracker({\n            element:            this.viewer.canvas,\n            clickTimeThreshold: this.viewer.clickTimeThreshold,\n            clickDistThreshold: this.viewer.clickDistThreshold,\n            dragHandler:        $.delegate( this, onOutsideDrag ),\n            dragEndHandler:     $.delegate( this, onOutsideDragEnd ),\n            clickHandler:       $.delegate( this, onClick ),\n            startDisabled:      !this.isSelecting,\n        });\n\n        if (this.keyboardShortcut) {\n            $.addEvent(\n                this.viewer.container,\n                'keypress',\n                $.delegate(this, onKeyPress),\n                false\n            );\n        }\n\n        var prefix = this.prefixUrl || this.viewer.prefixUrl || '';\n        var useGroup = this.viewer.buttons && this.viewer.buttons.buttons;\n        var anyButton = useGroup ? this.viewer.buttons.buttons[0] : null;\n        var onFocusHandler = anyButton ? anyButton.onFocus : null;\n        var onBlurHandler = anyButton ? anyButton.onBlur : null;\n        if (this.showSelectionControl) {\n            this.toggleButton = new $.Button({\n                element:    this.toggleButton ? $.getElement( this.toggleButton ) : null,\n                clickTimeThreshold: this.viewer.clickTimeThreshold,\n                clickDistThreshold: this.viewer.clickDistThreshold,\n                tooltip:    $.getString('Tooltips.SelectionToggle') || 'Toggle selection',\n                srcRest:    prefix + this.navImages.selection.REST,\n                srcGroup:   prefix + this.navImages.selection.GROUP,\n                srcHover:   prefix + this.navImages.selection.HOVER,\n                srcDown:    prefix + this.navImages.selection.DOWN,\n                onRelease:  this.toggleState.bind( this ),\n                onFocus:    onFocusHandler,\n                onBlur:     onBlurHandler\n            });\n            if (useGroup) {\n                this.viewer.buttons.buttons.push(this.toggleButton);\n                this.viewer.buttons.element.appendChild(this.toggleButton.element);\n            }\n            if (this.toggleButton.imgDown) {\n                this.buttonActiveImg = this.toggleButton.imgDown.cloneNode(true);\n                this.toggleButton.element.appendChild(this.buttonActiveImg);\n            }\n        }\n        if (this.showConfirmDenyButtons) {\n            this.confirmButton = new $.Button({\n                element:    this.confirmButton ? $.getElement( this.confirmButton ) : null,\n                clickTimeThreshold: this.viewer.clickTimeThreshold,\n                clickDistThreshold: this.viewer.clickDistThreshold,\n                tooltip:    $.getString('Tooltips.SelectionConfirm') || 'Confirm selection',\n                srcRest:    prefix + this.navImages.selectionConfirm.REST,\n                srcGroup:   prefix + this.navImages.selectionConfirm.GROUP,\n                srcHover:   prefix + this.navImages.selectionConfirm.HOVER,\n                srcDown:    prefix + this.navImages.selectionConfirm.DOWN,\n                onRelease:  this.confirm.bind( this ),\n                onFocus:    onFocusHandler,\n                onBlur:     onBlurHandler\n            });\n            var confirm = this.confirmButton.element;\n            confirm.classList.add('confirm-button');\n            this.element.appendChild(confirm);\n\n            this.cancelButton = new $.Button({\n                element:    this.cancelButton ? $.getElement( this.cancelButton ) : null,\n                clickTimeThreshold: this.viewer.clickTimeThreshold,\n                clickDistThreshold: this.viewer.clickDistThreshold,\n                tooltip:    $.getString('Tooltips.SelectionConfirm') || 'Cancel selection',\n                srcRest:    prefix + this.navImages.selectionCancel.REST,\n                srcGroup:   prefix + this.navImages.selectionCancel.GROUP,\n                srcHover:   prefix + this.navImages.selectionCancel.HOVER,\n                srcDown:    prefix + this.navImages.selectionCancel.DOWN,\n                onRelease:  this.cancel.bind( this ),\n                onFocus:    onFocusHandler,\n                onBlur:     onBlurHandler\n            });\n            var cancel = this.cancelButton.element;\n            cancel.classList.add('cancel-button');\n            this.element.appendChild(cancel);\n\n            if (this.styleConfirmDenyButtons) {\n                confirm.style.position = 'absolute';\n                confirm.style.top = '50%';\n                confirm.style.left = '50%';\n                confirm.style.transform = 'translate(-100%, -50%)';\n\n                cancel.style.position = 'absolute';\n                cancel.style.top = '50%';\n                cancel.style.left = '50%';\n                cancel.style.transform = 'translate(0, -50%)';\n            }\n        }\n\n        this.viewer.addHandler('selection', this.onSelection);\n\n        this.viewer.addHandler('open', this.draw.bind(this));\n        this.viewer.addHandler('animation', this.draw.bind(this));\n        this.viewer.addHandler('resize', this.draw.bind(this));\n        this.viewer.addHandler('rotate', this.draw.bind(this));\n    };\n\n    $.extend( $.Selection.prototype, $.ControlDock.prototype, /** @lends OpenSeadragon.Selection.prototype */{\n\n        toggleState: function() {\n            return this.setState(!this.isSelecting);\n        },\n\n        setState: function(enabled) {\n            this.isSelecting = enabled;\n            // this.viewer.innerTracker.setTracking(!enabled);\n            this.outerTracker.setTracking(enabled);\n            enabled ? this.draw() : this.undraw();\n            if (this.buttonActiveImg) {\n                this.buttonActiveImg.style.visibility = enabled ? 'visible' : 'hidden';\n            }\n            this.viewer.raiseEvent('selection_toggle', {enabled: enabled});\n            return this;\n        },\n\n        enable: function() {\n            return this.setState(true);\n        },\n\n        disable: function() {\n            return this.setState(false);\n        },\n\n        draw: function() {\n            if (this.rect) {\n                this.overlay.update(this.rect.normalize());\n                this.overlay.drawHTML(this.viewer.drawer.container, this.viewer.viewport);\n            }\n            return this;\n        },\n\n        undraw: function() {\n            this.overlay.destroy();\n            this.rect = null;\n            return this;\n        },\n\n        confirm: function() {\n            if (this.rect) {\n                var result = this.rect.normalize();\n                if (this.returnPixelCoordinates) {\n                    var real = this.viewer.viewport.viewportToImageRectangle(result);\n                    real = $.SelectionRect.fromRect(real).round();\n                    real.rotation = result.rotation;\n                    result = real;\n                }\n                this.viewer.raiseEvent('selection', result);\n                this.undraw();\n            }\n            return this;\n        },\n\n        cancel: function() {\n            this.viewer.raiseEvent('selection_cancel', false);\n            return this.undraw();\n        },\n    });\n\n    function onOutsideDrag(e) {\n        // Disable move when makeing new selection\n        this.viewer.setMouseNavEnabled(false);\n        var delta = this.viewer.viewport.deltaPointsFromPixels(e.delta, true);\n        var end = this.viewer.viewport.pointFromPixel(e.position, true);\n        var start = new $.Point(end.x - delta.x, end.y - delta.y);\n        if (!this.rect) {\n            if (this.restrictToImage) {\n                if (!pointIsInImage(start)) {\n                    return;\n                }\n                restrictVector(delta, end);\n            }\n            if (this.startRotated) {\n                this.rotatedStartPoint = start;\n                this.rect = getPrerotatedRect(start, end, this.startRotatedHeight);\n            } else {\n                this.rect = new $.SelectionRect(start.x, start.y, delta.x, delta.y);\n            }\n            this.rectDone = false;\n        } else {\n            var oldRect;\n            if (this.restrictToImage) {\n                oldRect = this.rect.clone();\n            }\n            if (this.rectDone) {\n                // rotate\n                var angle1 = this.rect.getAngleFromCenter(start);\n                var angle2 = this.rect.getAngleFromCenter(end);\n                this.rect.rotation = (this.rect.rotation + angle1 - angle2) % Math.PI;\n            } else {\n                if (this.startRotated) {\n                    this.rect = getPrerotatedRect(this.rotatedStartPoint, end, this.startRotatedHeight);\n                } else {\n                    this.rect.width += delta.x;\n                    this.rect.height += delta.y;\n                }\n            }\n            if (this.restrictToImage && !this.rect.fitsIn(new $.Rect(0, 0, 1, 1))) {\n                this.rect = oldRect;\n            }\n        }\n        this.draw();\n    }\n\n    function onOutsideDragEnd() {\n        // Eable move after new selection is done\n        this.viewer.setMouseNavEnabled(true);\n        this.rectDone = true;\n    }\n\n    function onClick() {\n        this.viewer.canvas.focus();\n    }\n\n    function onInsideDrag(e) {\n        $.addClass(this.element, 'dragging');\n        var delta = this.viewer.viewport.deltaPointsFromPixels(e.delta, true);\n        this.rect.x += delta.x;\n        this.rect.y += delta.y;\n        if (this.restrictToImage && !this.rect.fitsIn(new $.Rect(0, 0, 1, 1))) {\n            this.rect.x -= delta.x;\n            this.rect.y -= delta.y;\n        }\n        this.draw();\n    }\n\n    function onInsideDragEnd() {\n        $.removeClass(this.element, 'dragging');\n    }\n\n    function onBorderDrag(border, e) {\n        var delta = e.delta;\n        var rotation = this.rect.getDegreeRotation();\n        var center;\n        var oldRect = this.restrictToImage ? this.rect.clone() : null;\n        if (rotation !== 0) {\n            // adjust vector\n            delta = delta.rotate(-1 * rotation, new $.Point(0, 0));\n            center = this.rect.getCenter();\n        }\n        delta = this.viewer.viewport.deltaPointsFromPixels(delta, true);\n        switch (border) {\n            case 0:\n                this.rect.y += delta.y;\n                this.rect.height -= delta.y;\n                break;\n            case 1:\n                this.rect.width += delta.x;\n                break;\n            case 2:\n                this.rect.height += delta.y;\n                break;\n            case 3:\n                this.rect.x += delta.x;\n                this.rect.width -= delta.x;\n                break;\n            case 0.5:\n                this.rect.y += delta.y;\n                this.rect.height -= delta.y;\n                this.rect.x += delta.x;\n                this.rect.width -= delta.x;\n                break;\n            case 1.5:\n                this.rect.y += delta.y;\n                this.rect.height -= delta.y;\n                this.rect.width += delta.x;\n                break;\n            case 2.5:\n                this.rect.width += delta.x;\n                this.rect.height += delta.y;\n                break;\n            case 3.5:\n                this.rect.height += delta.y;\n                this.rect.x += delta.x;\n                this.rect.width -= delta.x;\n                break;\n        }\n        if (rotation !== 0) {\n            // calc center deviation\n            var newCenter = this.rect.getCenter();\n            // rotate new center around old\n            var target = newCenter.rotate(rotation, center);\n            // adjust new center\n            delta = target.minus(newCenter);\n            this.rect.x += delta.x;\n            this.rect.y += delta.y;\n        }\n        if (this.restrictToImage && !this.rect.fitsIn(new $.Rect(0, 0, 1, 1))) {\n            this.rect = oldRect;\n        }\n        this.draw();\n    }\n\n    function onKeyPress(e) {\n        var key = e.keyCode ? e.keyCode : e.charCode;\n        if (key === 13) {\n            this.confirm();\n        } else if (String.fromCharCode(key) === this.keyboardShortcut) {\n            this.toggleState();\n        }\n    }\n\n    function getPrerotatedRect(start, end, height) {\n        if (start.x > end.x) {\n            // always draw left to right\n            var x = start;\n            start = end;\n            end = x;\n        }\n        var delta = end.minus(start);\n        var dist = start.distanceTo(end);\n        var angle = -1 * Math.atan2(delta.x, delta.y) + (Math.PI / 2);\n        var center = new $.Point(\n            delta.x / 2 + start.x,\n            delta.y / 2 + start.y\n        );\n        var rect = new $.SelectionRect(\n            center.x - (dist / 2),\n            center.y - (height / 2),\n            dist,\n            height,\n            angle\n        );\n        var heightModDelta = new $.Point(0, height);\n        heightModDelta = heightModDelta.rotate(rect.getDegreeRotation(), new $.Point(0, 0));\n        rect.x += heightModDelta.x / 2;\n        rect.y += heightModDelta.y / 2;\n        return rect;\n    }\n\n    function pointIsInImage(point) {\n        return point.x >= 0 && point.x <= 1 && point.y >= 0 && point.y <= 1;\n    }\n\n    function restrictVector(delta, end) {\n        var start;\n        for (var prop in {x: 0, y: 0}) {\n            start = end[prop] - delta[prop];\n            if (start < 1 && start > 0) {\n                if (end[prop] > 1) {\n                    delta[prop] -= end[prop] - 1;\n                    end[prop] = 1;\n                } else if (end[prop] < 0) {\n                    delta[prop] -= end[prop];\n                    end[prop] = 0;\n                }\n            }\n        }\n    }\n\n})(OpenSeadragon);\n","(function( $ ){\n    'use strict';\n\n    /**\n     * @class Overlay\n     * @classdesc Provides a way to float an HTML element on top of the viewer element.\n     *\n     * @memberof OpenSeadragon\n     * @param {Object} options\n     * @param {Element} options.element\n     * @param {OpenSeadragon.Point|OpenSeadragon.Rect|OpenSeadragon.SelectionRect} options.location - The\n     * location of the overlay on the image. If a {@link OpenSeadragon.Point}\n     * is specified, the overlay will keep a constant size independently of the\n     * zoom. If a {@link OpenSeadragon.Rect} is specified, the overlay size will\n     * be adjusted when the zoom changes.\n     * @param {OpenSeadragon.OverlayPlacement} [options.placement=OpenSeadragon.OverlayPlacement.TOP_LEFT]\n     * Relative position to the viewport.\n     * Only used if location is a {@link OpenSeadragon.Point}.\n     * @param {OpenSeadragon.Overlay.OnDrawCallback} [options.onDraw]\n     * @param {Boolean} [options.checkResize=true] Set to false to avoid to\n     * check the size of the overlay everytime it is drawn when using a\n     * {@link OpenSeadragon.Point} as options.location. It will improve\n     * performances but will cause a misalignment if the overlay size changes.\n     */\n    $.SelectionOverlay = function( element, location) {\n        $.Overlay.apply( this, arguments );\n\n        // set the rotation in radians\n        if ( $.isPlainObject( element ) ) {\n            this.rotation = element.location.rotation || 0;\n        } else {\n            this.rotation = location.rotation || 0;\n        }\n    };\n\n    $.SelectionOverlay.prototype = $.extend( Object.create($.Overlay.prototype), {\n\n        /**\n         * @function\n         * @param {Element} container\n         */\n        drawHTML: function() {\n            $.Overlay.prototype.drawHTML.apply( this, arguments );\n            this.style.transform = this.style.transform.replace(/ ?rotate\\(.+rad\\)/, '') +\n                ' rotate(' + this.rotation + 'rad)';\n        },\n\n        /**\n         * @function\n         * @param {OpenSeadragon.Point|OpenSeadragon.Rect} location\n         * @param {OpenSeadragon.OverlayPlacement} position\n         */\n        update: function( location ) {\n            $.Overlay.prototype.update.apply( this, arguments );\n            this.rotation = location.rotation || 0;\n        }\n    });\n\n}( OpenSeadragon ));\n","(function( $ ){\n    'use strict';\n\n    /**\n     * @class SelectionRect\n     * @classdesc A display rectangle is very similar to {@link OpenSeadragon.Rect} but adds rotation\n     * around the center point\n     *\n     * @memberof OpenSeadragon\n     * @extends OpenSeadragon.Rect\n     * @param {Number} x The vector component 'x'.\n     * @param {Number} y The vector component 'y'.\n     * @param {Number} width The vector component 'height'.\n     * @param {Number} height The vector component 'width'.\n     * @param {Number} rotation The rotation in radians\n     */\n    $.SelectionRect = function( x, y, width, height, rotation ) {\n        $.Rect.apply( this, [ x, y, width, height ] );\n\n        /**\n         * The rotation in radians\n         * @member {Number} rotation\n         * @memberof OpenSeadragon.SelectionRect#\n         */\n        this.rotation = rotation || 0;\n    };\n\n    $.SelectionRect.fromRect = function(rect) {\n        return new $.SelectionRect(\n            rect.x,\n            rect.y,\n            rect.width,\n            rect.height\n        );\n    };\n\n    $.SelectionRect.prototype = $.extend( Object.create($.Rect.prototype), {\n\n        /**\n         * @function\n         * @returns {OpenSeadragon.Rect} a duplicate of this Rect\n         */\n        clone: function() {\n            return new $.SelectionRect(this.x, this.y, this.width, this.height, this.rotation);\n        },\n\n        /**\n         * Determines if two Rectangles have equivalent components.\n         * @function\n         * @param {OpenSeadragon.Rect} rectangle The Rectangle to compare to.\n         * @return {Boolean} 'true' if all components are equal, otherwise 'false'.\n         */\n        equals: function( other ) {\n            return $.Rect.prototype.equals.apply(this, [ other ]) &&\n                ( this.rotation === other.rotation );\n        },\n\n        /**\n         * Provides a string representation of the rectangle which is useful for\n         * debugging.\n         * @function\n         * @returns {String} A string representation of the rectangle.\n         */\n        toString: function() {\n            return '[' +\n                (Math.round(this.x*100) / 100) + ',' +\n                (Math.round(this.y*100) / 100) + ',' +\n                (Math.round(this.width*100) / 100) + 'x' +\n                (Math.round(this.height*100) / 100) + '@' +\n                (Math.round(this.rotation*100) / 100) +\n            ']';\n        },\n\n        swapWidthHeight: function() {\n            var swapped = this.clone();\n            swapped.width = this.height;\n            swapped.height = this.width;\n            swapped.x += (this.width - this.height) / 2;\n            swapped.y += (this.height - this.width) / 2;\n            return swapped;\n        },\n\n        /**\n         * @function\n         * @returns {Number} The rotaion in degrees\n         */\n        getDegreeRotation: function() {\n            return this.rotation * (180/Math.PI);\n        },\n\n        /**\n         * @function\n         * @param {OpenSeadragon.Point} point\n         * @returns {Number} The angle in radians\n         */\n        getAngleFromCenter: function(point) {\n            var diff = point.minus(this.getCenter());\n            return Math.atan2(diff.x, diff.y);\n        },\n\n        /**\n         * Rounds pixel coordinates\n         * @function\n         * @returns {SelectionRect} The altered rect\n         */\n        round: function() {\n            return new $.SelectionRect(\n                Math.round(this.x),\n                Math.round(this.y),\n                Math.round(this.width),\n                Math.round(this.height),\n                this.rotation\n            );\n        },\n\n        /**\n         * Fixes negative width/height, rotation larger than PI\n         * @function\n         * @returns {SelectionRect} The normalized rect\n         */\n        normalize: function() {\n            var fixed = this.clone();\n            if (fixed.width < 0) {\n                fixed.x += fixed.width;\n                fixed.width *= -1;\n            }\n            if (fixed.height < 0) {\n                fixed.y += fixed.height;\n                fixed.height *= -1;\n            }\n            fixed.rotation %= Math.PI;\n            return fixed;\n        },\n\n        /**\n         * @function\n         * @param {OpenSeadragon.Rect} area\n         * @returns {Boolean} Does this rect fit in a specified area\n         */\n        fitsIn: function(area) {\n            var rect = this.normalize();\n            var corners = [\n                rect.getTopLeft(),\n                rect.getTopRight(),\n                rect.getBottomRight(),\n                rect.getBottomLeft(),\n            ];\n            var center = rect.getCenter();\n            var rotation = rect.getDegreeRotation();\n            var areaEnd = area.getBottomRight();\n            for (var i = 0; i < 4; i++) {\n                corners[i] = corners[i].rotate(rotation, center);\n                if (corners[i].x < area.x || corners[i].x > areaEnd.x ||\n                    corners[i].y < area.y || corners[i].y > areaEnd.y) {\n                    return false;\n                }\n            }\n            return true;\n        },\n\n        /**\n         * Reduces rotation to within [-45, 45] degrees by swapping width & height\n         * @function\n         * @returns {SelectionRect} The altered rect\n         */\n        reduceRotation: function() {\n            var reduced;\n            if (this.rotation < Math.PI / (-4)) {\n                reduced = this.swapWidthHeight();\n                reduced.rotation += Math.PI / 2;\n            } else if (this.rotation > Math.PI / 4) {\n                reduced = this.swapWidthHeight();\n                reduced.rotation -= Math.PI / 2;\n            } else {\n                reduced = this.clone();\n            }\n            return reduced;\n        },\n    });\n\n}( OpenSeadragon ));\n"],"sourceRoot":"/source/"}