{"version":3,"sources":["selection.js","selectionoverlay.js","selectionrect.js"],"names":["$","onOutsideDrag","e","this","outerTracker","setTracking","start","Point","position","x","delta","y","viewer","viewport","pointFromPixel","end","deltaPointsFromPixels","rect","rectDone","angle1","getAngleFromCenter","angle2","rotation","Math","PI","width","height","SelectionRect","draw","onOutsideDragEnd","onInsideDrag","addClass","element","onInsideDragEnd","removeClass","onKeyPress","key","keyCode","charCode","console","log","normalizeRect","raiseEvent","undraw","String","fromCharCode","keyboardShortcut","toggleState","fixed","clone","version","major","Error","Viewer","prototype","selection","options","selectionInstance","Selection","extend","showSelectionControl","onSelection","isSelecting","makeNeutralElement","style","background","overlay","SelectionOverlay","MouseTracker","drawer","canvas","dragHandler","delegate","dragEndHandler","keyHandler","startDisabled","clickHandler","innerTracker","scrollHandler","pinchHandler","addEvent","container","addHandler","disable","enable","update","drawHTML","destroy","point","diff","minus","getCenter","atan2","OpenSeadragon","location","Overlay","apply","arguments","isPlainObject","Object","create","transform","replace","Rect","equals","other","toString","round","getDegreeRotation"],"mappings":"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","file":"openseadragonselection.js","sourcesContent":["/*\n * OpenSeadragon - full-screen support functions\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n(function( $ ) {\n    'use strict';\n\n    if (!$.version || $.version.major < 2) {\n        throw new Error('This version of OpenSeadragonSelection requires OpenSeadragon version 2.0.0+');\n    }\n\n    $.Viewer.prototype.selection = function(options) {\n        if (!this.selectionInstance || options) {\n            options = options || {};\n            options.viewer = this;\n            this.selectionInstance = new $.Selection(options);\n        }\n        return this.selectionInstance;\n    };\n\n\n    /**\n    * @class Selection\n    * @classdesc Provides functionality for selecting part of an image\n    * @memberof OpenSeadragon\n    * @param {Object} options\n    */\n    $.Selection = function ( options ) {\n\n        $.extend( true, this, {\n            //internal state properties\n            viewer:               null,\n            element:              null,\n            showSelectionControl: true,\n            keyboardShortcut:     'c',\n            onSelection:          function() {},\n\n            isSelecting:          false,\n            rect:                 null,\n            rectDone:             true,\n        }, options );\n\n        if (!this.element) {\n            this.element = $.makeNeutralElement('div');\n            this.element.style.background = '#000'; // @TEMP\n        }\n        if (!this.overlay) {\n            this.overlay = new $.SelectionOverlay(this.element, this.rect || new $.SelectionRect());\n        }\n\n        this.outerTracker = new $.MouseTracker({\n            element:                  this.viewer.drawer.canvas,\n            dragHandler:              $.delegate( this, onOutsideDrag ),\n            dragEndHandler:           $.delegate( this, onOutsideDragEnd ),\n            keyHandler:               $.delegate( this, onKeyPress ),\n            startDisabled:            !this.isSelecting,\n            clickHandler:             function() {console.log('turtle');},\n        });\n\n        this.innerTracker = new $.MouseTracker({\n            element:                  this.element,\n            dragHandler:              $.delegate( this, onInsideDrag ),\n            dragEndHandler:           $.delegate( this, onInsideDragEnd ),\n            keyHandler:               $.delegate( this, onKeyPress ),\n            scrollHandler:            $.delegate( this.viewer, this.viewer.innerTracker.scrollHandler ),\n            pinchHandler:             $.delegate( this.viewer, this.viewer.innerTracker.pinchHandler ),\n        });\n\n        if ( this.keyboardShortcut ) {\n            // var cb = this.viewer.innerTracker\n            $.addEvent(\n                this.viewer.container,\n                'keypress',\n                $.delegate( this, onKeyPress ),\n                false\n            );\n        }\n        if ( this.showSelectionControl ) {\n            // @TODO\n            // this.viewer.buttons.push( this.selectionButton = new $.Button({\n            //     element:    null,\n            //     clickTimeThreshold: this.viewer.clickTimeThreshold,\n            //     clickDistThreshold: this.viewer.clickDistThreshold,\n            //     tooltip:    $.getString( \"Tooltips.RotateRight\" ),\n            //     srcRest:    resolveUrl( this.viewer.prefixUrl, this.viewer.navImages.rotateright.REST ),\n            //     srcGroup:   resolveUrl( this.viewer.prefixUrl, this.viewer.navImages.rotateright.GROUP ),\n            //     srcHover:   resolveUrl( this.viewer.prefixUrl, this.viewer.navImages.rotateright.HOVER ),\n            //     srcDown:    resolveUrl( this.viewer.prefixUrl, this.viewer.navImages.rotateright.DOWN ),\n            //     onRelease:  this.toggleState.bind( this ),\n            //     onFocus:    $.delegate( this.viewer, onFocus ),\n            //     onBlur:     $.delegate( this.viewer, onBlur )\n            // }));\n        }\n\n        this.viewer.addHandler('selection', this.onSelection);\n    };\n\n    $.Selection.prototype = /** @lends OpenSeadragon.Selection.prototype */{\n\n        toggleState: function() {\n            $.console.log('onSelectionToggle');\n            if (this.isSelecting) {\n                this.disable();\n            } else {\n                this.enable();\n            }\n        },\n\n        enable: function() {\n            this.isSelecting = true;\n            this.outerTracker.setTracking(true);\n            this.undraw();\n        },\n\n        disable: function() {\n            this.isSelecting = false;\n            this.outerTracker.setTracking(false);\n            this.undraw();\n        },\n\n        draw: function() {\n            this.overlay.update(normalizeRect(this.rect));\n            this.overlay.drawHTML(this.viewer.container, this.viewer.viewport);\n        },\n\n        undraw: function() {\n            this.overlay.destroy();\n            this.rect = null;\n        },\n\n        getAngleFromCenter: function(point) {\n            var diff = point.minus(this.rect.getCenter());\n            return Math.atan2(diff.x, diff.y);\n        }\n    };\n\n    function onOutsideDrag(e) {\n    this.outerTracker.setTracking(true);\n        var start = new $.Point(e.position.x - e.delta.x, e.position.y - e.delta.y);\n        start = this.viewer.viewport.pointFromPixel(start, true);\n        var end = this.viewer.viewport.deltaPointsFromPixels(e.delta, true);\n        if (!this.rect) {\n            this.rect = new $.SelectionRect(start.x, start.y, end.x, end.y);\n            this.rectDone = false;\n        } else if (this.rectDone) {\n            // rotate\n            var angle1 = this.getAngleFromCenter(start);\n            end = this.viewer.viewport.pointFromPixel(e.position, true);\n            var angle2 = this.getAngleFromCenter(end);\n            this.rect.rotation = (this.rect.rotation + angle1 - angle2) % Math.PI;\n        } else {\n            this.rect.width += end.x;\n            this.rect.height += end.y;\n        }\n        this.draw();\n        return true;\n    }\n\n    function onOutsideDragEnd() {\n        this.rectDone = true;\n        return true;\n    }\n\n    function onInsideDrag(e) {\n        $.addClass(this.element, 'dragging');\n        var delta = this.viewer.viewport.deltaPointsFromPixels(e.delta, true);\n        this.rect.x += delta.x;\n        this.rect.y += delta.y;\n        this.draw();\n        return true;\n    }\n\n    function onInsideDragEnd() {\n        $.removeClass(this.element, 'dragging');\n        return true;\n    }\n\n    function onKeyPress(e) {\n        var key = e.keyCode ? e.keyCode : e.charCode;\n        if (key === 13 && this.rect) {\n            console.log(normalizeRect(this.rect));\n            this.viewer.raiseEvent( 'selection', normalizeRect(this.rect) );\n            this.undraw();\n        } else if (String.fromCharCode(key) === this.keyboardShortcut) {\n            this.toggleState();\n        }\n        return true;\n    }\n\n    function normalizeRect(rect) {\n        var fixed = rect.clone();\n        if (fixed.width < 0) {\n            fixed.x += fixed.width;\n            fixed.width *= -1;\n        }\n        if (fixed.height < 0) {\n            fixed.y += fixed.height;\n            fixed.height *= -1;\n        }\n        // fixed.rotation %= Math.PI;\n        return fixed;\n    }\n\n})( OpenSeadragon );\n","(function( $ ){\n    'use strict';\n\n    /**\n     * @class Overlay\n     * @classdesc Provides a way to float an HTML element on top of the viewer element.\n     *\n     * @memberof OpenSeadragon\n     * @param {Object} options\n     * @param {Element} options.element\n     * @param {OpenSeadragon.Point|OpenSeadragon.SelectionRect} options.location - The\n     * location of the overlay on the image. If a {@link OpenSeadragon.Point}\n     * is specified, the overlay will keep a constant size independently of the\n     * zoom. If a {@link OpenSeadragon.SelectionRect} is specified, the overlay size will\n     * be adjusted when the zoom changes.\n     * @param {OpenSeadragon.OverlayPlacement} [options.placement=OpenSeadragon.OverlayPlacement.TOP_LEFT]\n     * Relative position to the viewport.\n     * Only used if location is a {@link OpenSeadragon.Point}.\n     * @param {OpenSeadragon.Overlay.OnDrawCallback} [options.onDraw]\n     * @param {Boolean} [options.checkResize=true] Set to false to avoid to\n     * check the size of the overlay everytime it is drawn when using a\n     * {@link OpenSeadragon.Point} as options.location. It will improve\n     * performances but will cause a misalignment if the overlay size changes.\n     */\n    $.SelectionOverlay = function( element, location) {\n        $.Overlay.apply( this, arguments );\n\n        // set the rotation in radians\n        if ( $.isPlainObject( element ) ) {\n            this.rotation = element.location.rotation || 0;\n        } else {\n            this.rotation = location.rotation || 0;\n        }\n    };\n\n    $.SelectionOverlay.prototype = $.extend( Object.create($.Overlay.prototype), {\n\n        /**\n         * @function\n         * @param {Element} container\n         */\n        drawHTML: function() {\n            $.Overlay.prototype.drawHTML.apply( this, arguments );\n            this.style.transform = this.style.transform.replace(/ ?rotate\\(.+rad\\)/, '') +\n                ' rotate(' + this.rotation + 'rad)';\n        },\n\n        /**\n         * @function\n         * @param {OpenSeadragon.Point|OpenSeadragon.Rect} location\n         * @param {OpenSeadragon.OverlayPlacement} position\n         */\n        update: function( location ) {\n            $.Overlay.prototype.update.apply( this, arguments );\n            this.rotation = location.rotation || 0;\n        }\n    });\n\n}( OpenSeadragon ));\n","(function( $ ){\n    'use strict';\n\n    /**\n     * @class SelectionRect\n     * @classdesc A display rectangle is very similar to {@link OpenSeadragon.Rect} but adds rotation\n     * around the center point\n     *\n     * @memberof OpenSeadragon\n     * @extends OpenSeadragon.Rect\n     * @param {Number} x The vector component 'x'.\n     * @param {Number} y The vector component 'y'.\n     * @param {Number} width The vector component 'height'.\n     * @param {Number} height The vector component 'width'.\n     * @param {Number} rotation The rotation in radians\n     */\n    $.SelectionRect = function( x, y, width, height, rotation ) {\n        $.Rect.apply( this, [ x, y, width, height ] );\n\n        /**\n         * The rotation in radians\n         * @member {Number} rotation\n         * @memberof OpenSeadragon.SelectionRect#\n         */\n        this.rotation = rotation || 0;\n    };\n\n    $.SelectionRect.prototype = $.extend( Object.create($.Rect.prototype), {\n\n        /**\n         * @function\n         * @returns {OpenSeadragon.Rect} a duplicate of this Rect\n         */\n        clone: function() {\n            return new $.SelectionRect(this.x, this.y, this.width, this.height, this.rotation);\n        },\n\n        /**\n         * Determines if two Rectangles have equivalent components.\n         * @function\n         * @param {OpenSeadragon.Rect} rectangle The Rectangle to compare to.\n         * @return {Boolean} 'true' if all components are equal, otherwise 'false'.\n         */\n        equals: function( other ) {\n            return $.Rect.prototype.equals.apply(this, [ other ]) &&\n                ( this.rotation === other.rotation );\n        },\n\n        /**\n         * Provides a string representation of the rectangle which is useful for\n         * debugging.\n         * @function\n         * @returns {String} A string representation of the rectangle.\n         */\n        toString: function() {\n            return '[' +\n                (Math.round(this.x*100) / 100) + ',' +\n                (Math.round(this.y*100) / 100) + ',' +\n                (Math.round(this.width*100) / 100) + 'x' +\n                (Math.round(this.height*100) / 100) + '@' +\n                (Math.round(this.rotation*100) / 100) +\n            ']';\n        },\n\n        /**\n         * @function\n         * @returns {Number} The rotaion in degrees\n         */\n        getDegreeRotation: function() {\n            return this.rotation * (180/Math.PI);\n        },\n    });\n\n}( OpenSeadragon ));\n"],"sourceRoot":"/source/"}