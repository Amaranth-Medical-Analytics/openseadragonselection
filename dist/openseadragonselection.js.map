{"version":3,"sources":["selection.js","selectionoverlay.js","selectionrect.js"],"names":["$","onOutsideDrag","e","end","this","viewer","viewport","deltaPointsFromPixels","delta","rect","startNew","start","Point","position","x","y","pointFromPixel","SelectionRect","width","height","draw","onOutsideDragEnd","onInsideDrag","addClass","element","onInsideDragEnd","removeClass","onKeyPress","key","keyCode","charCode","raiseEvent","fixRect","undraw","String","fromCharCode","keyboardShortcut","toggleState","fixed","version","major","Error","Viewer","prototype","selection","options","selectionInstance","refresh","Selection","extend","showSelectionControl","onSelection","isSelecting","makeNeutralElement","style","background","overlay","SelectionOverlay","outerTracker","MouseTracker","drawer","canvas","dragHandler","delegate","dragEndHandler","keyHandler","startDisabled","innerTracker","addEvent","container","addHandler","console","log","disable","enable","setTracking","update","drawHTML","destroy","OpenSeadragon","location","Overlay","apply","arguments","isPlainObject","rotation","Object","create","transform","replace","Rect","clone","equals","other","toString","Math","round"],"mappings":"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","file":"openseadragonselection.js","sourcesContent":["/*\n * OpenSeadragon - full-screen support functions\n *\n * Copyright (C) 2009 CodePlex Foundation\n * Copyright (C) 2010-2013 OpenSeadragon contributors\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * - Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * - Neither the name of CodePlex Foundation nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n(function( $ ) {\n    'use strict';\n\n    if (!$.version || $.version.major < 2) {\n        throw new Error('This version of OpenSeadragonSelection requires OpenSeadragon version 2.0.0+');\n    }\n\n    $.Viewer.prototype.selection = function(options) {\n        if (!this.selectionInstance) {\n            options = options || {};\n            options.viewer = this;\n            this.selectionInstance = new $.Selection(options);\n        } else {\n            this.selectionInstance.refresh(options);\n        }\n    };\n\n\n    /**\n    * @class Selection\n    * @classdesc Provides functionality for selecting part of an image\n    * @memberof OpenSeadragon\n    * @param {Object} options\n    */\n    $.Selection = function ( options ) {\n\n        $.extend( true, this, {\n            //internal state properties\n            viewer:               null,\n            element:              null,\n            showSelectionControl: true,\n            keyboardShortcut:     'c',\n            onSelection:          function() {},\n\n            isSelecting:          false,\n            rect:                 null,\n            startNew:             true\n        }, options );\n\n        if (!this.element) {\n            this.element = $.makeNeutralElement('div');\n            this.element.style.background = '#000'; // @TEMP\n        }\n        if (!this.overlay) {\n            this.overlay = new $.SelectionOverlay(this.element, this.rect || new $.SelectionRect());\n        }\n\n        this.outerTracker = new $.MouseTracker({\n            element:                  this.viewer.drawer.canvas,\n            dragHandler:              $.delegate( this, onOutsideDrag ),\n            dragEndHandler:           $.delegate( this, onOutsideDragEnd ),\n            keyHandler:               $.delegate( this, onKeyPress ),\n            startDisabled:            !this.isSelecting,\n        });\n\n        this.innerTracker = new $.MouseTracker({\n            element:                  this.element,\n            dragHandler:              $.delegate( this, onInsideDrag ),\n            dragEndHandler:           $.delegate( this, onInsideDragEnd ),\n            // keyHandler:               $.delegate( this, onKeyPress ),\n        });\n\n        if ( this.keyboardShortcut ) {\n            // var cb = this.viewer.innerTracker\n            $.addEvent(\n                this.viewer.container,\n                'keypress',\n                $.delegate( this, onKeyPress ),\n                false\n            );\n        }\n        if ( this.showSelectionControl ) {\n            // @TODO\n            // this.viewer.buttons.push( this.selectionButton = new $.Button({\n            //     element:    null,\n            //     clickTimeThreshold: this.viewer.clickTimeThreshold,\n            //     clickDistThreshold: this.viewer.clickDistThreshold,\n            //     tooltip:    $.getString( \"Tooltips.RotateRight\" ),\n            //     srcRest:    resolveUrl( this.viewer.prefixUrl, this.viewer.navImages.rotateright.REST ),\n            //     srcGroup:   resolveUrl( this.viewer.prefixUrl, this.viewer.navImages.rotateright.GROUP ),\n            //     srcHover:   resolveUrl( this.viewer.prefixUrl, this.viewer.navImages.rotateright.HOVER ),\n            //     srcDown:    resolveUrl( this.viewer.prefixUrl, this.viewer.navImages.rotateright.DOWN ),\n            //     onRelease:  this.toggleState.bind( this ),\n            //     onFocus:    $.delegate( this.viewer, onFocus ),\n            //     onBlur:     $.delegate( this.viewer, onBlur )\n            // }));\n        }\n\n        this.viewer.addHandler('selection', this.onSelection);\n    };\n\n    $.Selection.prototype = /** @lends OpenSeadragon.Selection.prototype */{\n\n        toggleState: function() {\n            $.console.log('onSelectionToggle');\n            if (this.isSelecting) {\n                this.disable();\n            } else {\n                this.enable();\n            }\n        },\n\n        enable: function() {\n            this.isSelecting = true;\n            this.outerTracker.setTracking(true);\n            this.undraw();\n        },\n\n        disable: function() {\n            this.isSelecting = false;\n            this.outerTracker.setTracking(false);\n            this.undraw();\n        },\n\n        draw: function() {\n            this.overlay.update(fixRect(this.rect));\n            this.overlay.drawHTML(this.viewer.container, this.viewer.viewport);\n        },\n\n        undraw: function() {\n            this.overlay.destroy();\n            this.rect = null;\n        },\n    };\n\n    function onOutsideDrag(e) {\n        var end = this.viewer.viewport.deltaPointsFromPixels(e.delta, true);\n        if (!this.rect || this.startNew) {\n            this.startNew = false;\n            var start = new $.Point(e.position.x - e.delta.x, e.position.y - e.delta.y);\n            start = this.viewer.viewport.pointFromPixel(start, true);\n            this.rect = new $.SelectionRect(start.x, start.y, end.x, end.y);\n        } else {\n            this.rect.width += end.x;\n            this.rect.height += end.y;\n        }\n        this.draw();\n    }\n\n    function onOutsideDragEnd() {\n        this.startNew = true;\n    }\n\n    function onInsideDrag(e) {\n        $.addClass(this.element, 'dragging');\n        var delta = this.viewer.viewport.deltaPointsFromPixels(e.delta, true);\n        this.rect.x += delta.x;\n        this.rect.y += delta.y;\n        this.draw();\n    }\n\n    function onInsideDragEnd() {\n        $.removeClass(this.element, 'dragging');\n    }\n\n    function onKeyPress(e) {\n        var key = e.keyCode ? e.keyCode : e.charCode;\n        if (key === 13) {\n            this.viewer.raiseEvent( 'selection', fixRect(this.rect) );\n            this.undraw();\n        } else if (String.fromCharCode(key) === this.keyboardShortcut) {\n            this.toggleState();\n        }\n    }\n\n    function fixRect(rect) {\n        var fixed = new $.SelectionRect(rect.x, rect.y, rect.width, rect.height);\n        if (fixed.width < 0) {\n            fixed.x += fixed.width;\n            fixed.width *= -1;\n        }\n        if (fixed.height < 0) {\n            fixed.y += fixed.height;\n            fixed.height *= -1;\n        }\n        return fixed;\n    }\n\n})( OpenSeadragon );\n","(function( $ ){\n    'use strict';\n\n    /**\n     * @class Overlay\n     * @classdesc Provides a way to float an HTML element on top of the viewer element.\n     *\n     * @memberof OpenSeadragon\n     * @param {Object} options\n     * @param {Element} options.element\n     * @param {OpenSeadragon.Point|OpenSeadragon.SelectionRect} options.location - The\n     * location of the overlay on the image. If a {@link OpenSeadragon.Point}\n     * is specified, the overlay will keep a constant size independently of the\n     * zoom. If a {@link OpenSeadragon.SelectionRect} is specified, the overlay size will\n     * be adjusted when the zoom changes.\n     * @param {OpenSeadragon.OverlayPlacement} [options.placement=OpenSeadragon.OverlayPlacement.TOP_LEFT]\n     * Relative position to the viewport.\n     * Only used if location is a {@link OpenSeadragon.Point}.\n     * @param {OpenSeadragon.Overlay.OnDrawCallback} [options.onDraw]\n     * @param {Boolean} [options.checkResize=true] Set to false to avoid to\n     * check the size of the overlay everytime it is drawn when using a\n     * {@link OpenSeadragon.Point} as options.location. It will improve\n     * performances but will cause a misalignment if the overlay size changes.\n     */\n    $.SelectionOverlay = function( element, location) {\n        $.Overlay.apply( this, arguments );\n\n        // set the rotation in radians\n        if ( $.isPlainObject( element ) ) {\n            this.rotation = element.location.rotation || 0;\n        } else {\n            this.rotation = location.rotation || 0;\n        }\n    };\n\n    $.SelectionOverlay.prototype = $.extend( Object.create($.Overlay.prototype), {\n\n        /**\n         * @function\n         * @param {Element} container\n         */\n        drawHTML: function() {\n            $.Overlay.prototype.drawHTML.apply( this, arguments );\n            this.style.transform = this.style.transform.replace(/ ?rotate\\(.+rad\\)/, '') +\n                ' rotate(' + this.rotation + 'rad)';\n        },\n\n        /**\n         * @function\n         * @param {OpenSeadragon.Point|OpenSeadragon.Rect} location\n         * @param {OpenSeadragon.OverlayPlacement} position\n         */\n        update: function( location ) {\n            $.Overlay.prototype.update.apply( this, arguments );\n            this.rotation = location.rotation || 0;\n        }\n    });\n\n}( OpenSeadragon ));\n","(function( $ ){\n    'use strict';\n\n    /**\n     * @class SelectionRect\n     * @classdesc A display rectangle is very similar to {@link OpenSeadragon.Rect} but adds rotation\n     * around the center point\n     *\n     * @memberof OpenSeadragon\n     * @extends OpenSeadragon.Rect\n     * @param {Number} x The vector component 'x'.\n     * @param {Number} y The vector component 'y'.\n     * @param {Number} width The vector component 'height'.\n     * @param {Number} height The vector component 'width'.\n     * @param {Number} rotation The rotation in radians\n     */\n    $.SelectionRect = function( x, y, width, height, rotation ) {\n        $.Rect.apply( this, [ x, y, width, height ] );\n\n        /**\n         * The rotation in radians\n         * @member {Number} rotation\n         * @memberof OpenSeadragon.SelectionRect#\n         */\n        this.rotation = rotation || 0;\n    };\n\n    $.SelectionRect.prototype = $.extend( Object.create($.Rect.prototype), {\n\n        /**\n         * @function\n         * @returns {OpenSeadragon.Rect} a duplicate of this Rect\n         */\n        clone: function() {\n            return new $.SelectionRect(this.x, this.y, this.width, this.height, this.rotation);\n        },\n\n        /**\n         * Determines if two Rectangles have equivalent components.\n         * @function\n         * @param {OpenSeadragon.Rect} rectangle The Rectangle to compare to.\n         * @return {Boolean} 'true' if all components are equal, otherwise 'false'.\n         */\n        equals: function( other ) {\n            return $.Rect.prototype.equals.apply(this, [ other ]) &&\n                ( this.rotation === other.rotation );\n        },\n\n        /**\n         * Provides a string representation of the rectangle which is useful for\n         * debugging.\n         * @function\n         * @returns {String} A string representation of the rectangle.\n         */\n        toString: function() {\n            return '[' +\n                (Math.round(this.x*100) / 100) + ',' +\n                (Math.round(this.y*100) / 100) + ',' +\n                (Math.round(this.width*100) / 100) + 'x' +\n                (Math.round(this.height*100) / 100) + '@' +\n                (Math.round(this.rotation*100) / 100) +\n            ']';\n        }\n    });\n\n}( OpenSeadragon ));\n"],"sourceRoot":"/source/"}